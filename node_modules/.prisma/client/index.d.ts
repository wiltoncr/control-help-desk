
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: number
  email: string
  password: string
  name: string | null
  role: RoleUser
}

/**
 * Model Client
 * 
 */
export type Client = {
  id: number
  name: string
  cnpj: string
  email: string | null
}

/**
 * Model ClientUser
 * 
 */
export type ClientUser = {
  id: string
  userId: number
  clientId: number
  created_at: Date
  updated_at: Date
}

/**
 * Model ClientAccess
 * 
 */
export type ClientAccess = {
  accessId: number
  clientId: number
  created_at: Date
  updated_at: Date
  id: string
}

/**
 * Model Company
 * 
 */
export type Company = {
  id: number
  name: string
  cnpj: string
  email: string
  role: RoleUser
}

/**
 * Model Access
 * 
 */
export type Access = {
  id: number
  type: number
  server: boolean
  access: string
  desc: string
}

/**
 * Model AccessTypeAccess
 * 
 */
export type AccessTypeAccess = {
  id: string
  accessId: number
  typeAccessId: number
  created_at: Date
  updated_at: Date
}

/**
 * Model TypeAccess
 * 
 */
export type TypeAccess = {
  id: number
  description: string
  role: RoleUser
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const RoleUser: {
  ADMIN: 'ADMIN',
  SUPORTE: 'SUPORTE',
  CLIENTE: 'CLIENTE'
};

export type RoleUser = (typeof RoleUser)[keyof typeof RoleUser]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<GlobalReject>;

  /**
   * `prisma.clientUser`: Exposes CRUD operations for the **ClientUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClientUsers
    * const clientUsers = await prisma.clientUser.findMany()
    * ```
    */
  get clientUser(): Prisma.ClientUserDelegate<GlobalReject>;

  /**
   * `prisma.clientAccess`: Exposes CRUD operations for the **ClientAccess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClientAccesses
    * const clientAccesses = await prisma.clientAccess.findMany()
    * ```
    */
  get clientAccess(): Prisma.ClientAccessDelegate<GlobalReject>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<GlobalReject>;

  /**
   * `prisma.access`: Exposes CRUD operations for the **Access** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accesses
    * const accesses = await prisma.access.findMany()
    * ```
    */
  get access(): Prisma.AccessDelegate<GlobalReject>;

  /**
   * `prisma.accessTypeAccess`: Exposes CRUD operations for the **AccessTypeAccess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccessTypeAccesses
    * const accessTypeAccesses = await prisma.accessTypeAccess.findMany()
    * ```
    */
  get accessTypeAccess(): Prisma.AccessTypeAccessDelegate<GlobalReject>;

  /**
   * `prisma.typeAccess`: Exposes CRUD operations for the **TypeAccess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TypeAccesses
    * const typeAccesses = await prisma.typeAccess.findMany()
    * ```
    */
  get typeAccess(): Prisma.TypeAccessDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.12.0
   * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Client: 'Client',
    ClientUser: 'ClientUser',
    ClientAccess: 'ClientAccess',
    Company: 'Company',
    Access: 'Access',
    AccessTypeAccess: 'AccessTypeAccess',
    TypeAccess: 'TypeAccess'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    clients: number
  }

  export type UserCountOutputTypeSelect = {
    clients?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ClientCountOutputType
   */


  export type ClientCountOutputType = {
    access: number
    users: number
  }

  export type ClientCountOutputTypeSelect = {
    access?: boolean
    users?: boolean
  }

  export type ClientCountOutputTypeGetPayload<S extends boolean | null | undefined | ClientCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClientCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ClientCountOutputTypeArgs)
    ? ClientCountOutputType 
    : S extends { select: any } & (ClientCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ClientCountOutputType ? ClientCountOutputType[P] : never
  } 
      : ClientCountOutputType




  // Custom InputTypes

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect | null
  }



  /**
   * Count Type AccessCountOutputType
   */


  export type AccessCountOutputType = {
    typeAccess: number
    clients: number
  }

  export type AccessCountOutputTypeSelect = {
    typeAccess?: boolean
    clients?: boolean
  }

  export type AccessCountOutputTypeGetPayload<S extends boolean | null | undefined | AccessCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AccessCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AccessCountOutputTypeArgs)
    ? AccessCountOutputType 
    : S extends { select: any } & (AccessCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AccessCountOutputType ? AccessCountOutputType[P] : never
  } 
      : AccessCountOutputType




  // Custom InputTypes

  /**
   * AccessCountOutputType without action
   */
  export type AccessCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AccessCountOutputType
     */
    select?: AccessCountOutputTypeSelect | null
  }



  /**
   * Count Type TypeAccessCountOutputType
   */


  export type TypeAccessCountOutputType = {
    access: number
  }

  export type TypeAccessCountOutputTypeSelect = {
    access?: boolean
  }

  export type TypeAccessCountOutputTypeGetPayload<S extends boolean | null | undefined | TypeAccessCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TypeAccessCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TypeAccessCountOutputTypeArgs)
    ? TypeAccessCountOutputType 
    : S extends { select: any } & (TypeAccessCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TypeAccessCountOutputType ? TypeAccessCountOutputType[P] : never
  } 
      : TypeAccessCountOutputType




  // Custom InputTypes

  /**
   * TypeAccessCountOutputType without action
   */
  export type TypeAccessCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TypeAccessCountOutputType
     */
    select?: TypeAccessCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    role: RoleUser | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    role: RoleUser | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string | null
    role: RoleUser
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    clients?: boolean | User$clientsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    clients?: boolean | User$clientsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'clients' ? Array < ClientUserGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'clients' ? Array < ClientUserGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    clients<T extends User$clientsArgs= {}>(args?: Subset<T, User$clientsArgs>): Prisma.PrismaPromise<Array<ClientUserGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.clients
   */
  export type User$clientsArgs = {
    /**
     * Select specific fields to fetch from the ClientUser
     */
    select?: ClientUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientUserInclude | null
    where?: ClientUserWhereInput
    orderBy?: Enumerable<ClientUserOrderByWithRelationInput>
    cursor?: ClientUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ClientUserScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Client
   */


  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientSumAggregateOutputType = {
    id: number | null
  }

  export type ClientMinAggregateOutputType = {
    id: number | null
    name: string | null
    cnpj: string | null
    email: string | null
  }

  export type ClientMaxAggregateOutputType = {
    id: number | null
    name: string | null
    cnpj: string | null
    email: string | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    name: number
    cnpj: number
    email: number
    _all: number
  }


  export type ClientAvgAggregateInputType = {
    id?: true
  }

  export type ClientSumAggregateInputType = {
    id?: true
  }

  export type ClientMinAggregateInputType = {
    id?: true
    name?: true
    cnpj?: true
    email?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    name?: true
    cnpj?: true
    email?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    name?: true
    cnpj?: true
    email?: true
    _all?: true
  }

  export type ClientAggregateArgs = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: Enumerable<ClientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs = {
    where?: ClientWhereInput
    orderBy?: Enumerable<ClientOrderByWithAggregationInput>
    by: ClientScalarFieldEnum[]
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _avg?: ClientAvgAggregateInputType
    _sum?: ClientSumAggregateInputType
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }


  export type ClientGroupByOutputType = {
    id: number
    name: string
    cnpj: string
    email: string | null
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect = {
    id?: boolean
    name?: boolean
    cnpj?: boolean
    email?: boolean
    access?: boolean | Client$accessArgs
    users?: boolean | Client$usersArgs
    _count?: boolean | ClientCountOutputTypeArgs
  }


  export type ClientInclude = {
    access?: boolean | Client$accessArgs
    users?: boolean | Client$usersArgs
    _count?: boolean | ClientCountOutputTypeArgs
  }

  export type ClientGetPayload<S extends boolean | null | undefined | ClientArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Client :
    S extends undefined ? never :
    S extends { include: any } & (ClientArgs | ClientFindManyArgs)
    ? Client  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'access' ? Array < ClientAccessGetPayload<S['include'][P]>>  :
        P extends 'users' ? Array < ClientUserGetPayload<S['include'][P]>>  :
        P extends '_count' ? ClientCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ClientArgs | ClientFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'access' ? Array < ClientAccessGetPayload<S['select'][P]>>  :
        P extends 'users' ? Array < ClientUserGetPayload<S['select'][P]>>  :
        P extends '_count' ? ClientCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Client ? Client[P] : never
  } 
      : Client


  type ClientCountArgs = 
    Omit<ClientFindManyArgs, 'select' | 'include'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClientFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Client'> extends True ? Prisma__ClientClient<ClientGetPayload<T>> : Prisma__ClientClient<ClientGetPayload<T> | null, null>

    /**
     * Find one Client that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClientFindUniqueOrThrowArgs>
    ): Prisma__ClientClient<ClientGetPayload<T>>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClientFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Client'> extends True ? Prisma__ClientClient<ClientGetPayload<T>> : Prisma__ClientClient<ClientGetPayload<T> | null, null>

    /**
     * Find the first Client that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClientFindFirstOrThrowArgs>
    ): Prisma__ClientClient<ClientGetPayload<T>>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClientFindManyArgs>(
      args?: SelectSubset<T, ClientFindManyArgs>
    ): Prisma.PrismaPromise<Array<ClientGetPayload<T>>>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
    **/
    create<T extends ClientCreateArgs>(
      args: SelectSubset<T, ClientCreateArgs>
    ): Prisma__ClientClient<ClientGetPayload<T>>

    /**
     * Create many Clients.
     *     @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     *     @example
     *     // Create many Clients
     *     const client = await prisma.client.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientCreateManyArgs>(
      args?: SelectSubset<T, ClientCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
    **/
    delete<T extends ClientDeleteArgs>(
      args: SelectSubset<T, ClientDeleteArgs>
    ): Prisma__ClientClient<ClientGetPayload<T>>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientUpdateArgs>(
      args: SelectSubset<T, ClientUpdateArgs>
    ): Prisma__ClientClient<ClientGetPayload<T>>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientDeleteManyArgs>(
      args?: SelectSubset<T, ClientDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientUpdateManyArgs>(
      args: SelectSubset<T, ClientUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
    **/
    upsert<T extends ClientUpsertArgs>(
      args: SelectSubset<T, ClientUpsertArgs>
    ): Prisma__ClientClient<ClientGetPayload<T>>

    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClientClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    access<T extends Client$accessArgs= {}>(args?: Subset<T, Client$accessArgs>): Prisma.PrismaPromise<Array<ClientAccessGetPayload<T>>| Null>;

    users<T extends Client$usersArgs= {}>(args?: Subset<T, Client$usersArgs>): Prisma.PrismaPromise<Array<ClientUserGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Client base type for findUnique actions
   */
  export type ClientFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findUnique
   */
  export interface ClientFindUniqueArgs extends ClientFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client base type for findFirst actions
   */
  export type ClientFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: Enumerable<ClientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: Enumerable<ClientScalarFieldEnum>
  }

  /**
   * Client findFirst
   */
  export interface ClientFindFirstArgs extends ClientFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: Enumerable<ClientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: Enumerable<ClientScalarFieldEnum>
  }


  /**
   * Client findMany
   */
  export type ClientFindManyArgs = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: Enumerable<ClientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: Enumerable<ClientScalarFieldEnum>
  }


  /**
   * Client create
   */
  export type ClientCreateArgs = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }


  /**
   * Client createMany
   */
  export type ClientCreateManyArgs = {
    /**
     * The data used to create many Clients.
     */
    data: Enumerable<ClientCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Client update
   */
  export type ClientUpdateArgs = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
  }


  /**
   * Client upsert
   */
  export type ClientUpsertArgs = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }


  /**
   * Client delete
   */
  export type ClientDeleteArgs = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
  }


  /**
   * Client.access
   */
  export type Client$accessArgs = {
    /**
     * Select specific fields to fetch from the ClientAccess
     */
    select?: ClientAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientAccessInclude | null
    where?: ClientAccessWhereInput
    orderBy?: Enumerable<ClientAccessOrderByWithRelationInput>
    cursor?: ClientAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ClientAccessScalarFieldEnum>
  }


  /**
   * Client.users
   */
  export type Client$usersArgs = {
    /**
     * Select specific fields to fetch from the ClientUser
     */
    select?: ClientUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientUserInclude | null
    where?: ClientUserWhereInput
    orderBy?: Enumerable<ClientUserOrderByWithRelationInput>
    cursor?: ClientUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ClientUserScalarFieldEnum>
  }


  /**
   * Client without action
   */
  export type ClientArgs = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude | null
  }



  /**
   * Model ClientUser
   */


  export type AggregateClientUser = {
    _count: ClientUserCountAggregateOutputType | null
    _avg: ClientUserAvgAggregateOutputType | null
    _sum: ClientUserSumAggregateOutputType | null
    _min: ClientUserMinAggregateOutputType | null
    _max: ClientUserMaxAggregateOutputType | null
  }

  export type ClientUserAvgAggregateOutputType = {
    userId: number | null
    clientId: number | null
  }

  export type ClientUserSumAggregateOutputType = {
    userId: number | null
    clientId: number | null
  }

  export type ClientUserMinAggregateOutputType = {
    id: string | null
    userId: number | null
    clientId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ClientUserMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    clientId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ClientUserCountAggregateOutputType = {
    id: number
    userId: number
    clientId: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ClientUserAvgAggregateInputType = {
    userId?: true
    clientId?: true
  }

  export type ClientUserSumAggregateInputType = {
    userId?: true
    clientId?: true
  }

  export type ClientUserMinAggregateInputType = {
    id?: true
    userId?: true
    clientId?: true
    created_at?: true
    updated_at?: true
  }

  export type ClientUserMaxAggregateInputType = {
    id?: true
    userId?: true
    clientId?: true
    created_at?: true
    updated_at?: true
  }

  export type ClientUserCountAggregateInputType = {
    id?: true
    userId?: true
    clientId?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ClientUserAggregateArgs = {
    /**
     * Filter which ClientUser to aggregate.
     */
    where?: ClientUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientUsers to fetch.
     */
    orderBy?: Enumerable<ClientUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClientUsers
    **/
    _count?: true | ClientUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientUserMaxAggregateInputType
  }

  export type GetClientUserAggregateType<T extends ClientUserAggregateArgs> = {
        [P in keyof T & keyof AggregateClientUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientUser[P]>
      : GetScalarType<T[P], AggregateClientUser[P]>
  }




  export type ClientUserGroupByArgs = {
    where?: ClientUserWhereInput
    orderBy?: Enumerable<ClientUserOrderByWithAggregationInput>
    by: ClientUserScalarFieldEnum[]
    having?: ClientUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientUserCountAggregateInputType | true
    _avg?: ClientUserAvgAggregateInputType
    _sum?: ClientUserSumAggregateInputType
    _min?: ClientUserMinAggregateInputType
    _max?: ClientUserMaxAggregateInputType
  }


  export type ClientUserGroupByOutputType = {
    id: string
    userId: number
    clientId: number
    created_at: Date
    updated_at: Date
    _count: ClientUserCountAggregateOutputType | null
    _avg: ClientUserAvgAggregateOutputType | null
    _sum: ClientUserSumAggregateOutputType | null
    _min: ClientUserMinAggregateOutputType | null
    _max: ClientUserMaxAggregateOutputType | null
  }

  type GetClientUserGroupByPayload<T extends ClientUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClientUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientUserGroupByOutputType[P]>
            : GetScalarType<T[P], ClientUserGroupByOutputType[P]>
        }
      >
    >


  export type ClientUserSelect = {
    id?: boolean
    userId?: boolean
    clientId?: boolean
    created_at?: boolean
    updated_at?: boolean
    Client?: boolean | ClientArgs
    user?: boolean | UserArgs
  }


  export type ClientUserInclude = {
    Client?: boolean | ClientArgs
    user?: boolean | UserArgs
  }

  export type ClientUserGetPayload<S extends boolean | null | undefined | ClientUserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClientUser :
    S extends undefined ? never :
    S extends { include: any } & (ClientUserArgs | ClientUserFindManyArgs)
    ? ClientUser  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Client' ? ClientGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ClientUserArgs | ClientUserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Client' ? ClientGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof ClientUser ? ClientUser[P] : never
  } 
      : ClientUser


  type ClientUserCountArgs = 
    Omit<ClientUserFindManyArgs, 'select' | 'include'> & {
      select?: ClientUserCountAggregateInputType | true
    }

  export interface ClientUserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ClientUser that matches the filter.
     * @param {ClientUserFindUniqueArgs} args - Arguments to find a ClientUser
     * @example
     * // Get one ClientUser
     * const clientUser = await prisma.clientUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientUserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClientUserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ClientUser'> extends True ? Prisma__ClientUserClient<ClientUserGetPayload<T>> : Prisma__ClientUserClient<ClientUserGetPayload<T> | null, null>

    /**
     * Find one ClientUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClientUserFindUniqueOrThrowArgs} args - Arguments to find a ClientUser
     * @example
     * // Get one ClientUser
     * const clientUser = await prisma.clientUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClientUserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClientUserFindUniqueOrThrowArgs>
    ): Prisma__ClientUserClient<ClientUserGetPayload<T>>

    /**
     * Find the first ClientUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUserFindFirstArgs} args - Arguments to find a ClientUser
     * @example
     * // Get one ClientUser
     * const clientUser = await prisma.clientUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientUserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClientUserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ClientUser'> extends True ? Prisma__ClientUserClient<ClientUserGetPayload<T>> : Prisma__ClientUserClient<ClientUserGetPayload<T> | null, null>

    /**
     * Find the first ClientUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUserFindFirstOrThrowArgs} args - Arguments to find a ClientUser
     * @example
     * // Get one ClientUser
     * const clientUser = await prisma.clientUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClientUserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClientUserFindFirstOrThrowArgs>
    ): Prisma__ClientUserClient<ClientUserGetPayload<T>>

    /**
     * Find zero or more ClientUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClientUsers
     * const clientUsers = await prisma.clientUser.findMany()
     * 
     * // Get first 10 ClientUsers
     * const clientUsers = await prisma.clientUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientUserWithIdOnly = await prisma.clientUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClientUserFindManyArgs>(
      args?: SelectSubset<T, ClientUserFindManyArgs>
    ): Prisma.PrismaPromise<Array<ClientUserGetPayload<T>>>

    /**
     * Create a ClientUser.
     * @param {ClientUserCreateArgs} args - Arguments to create a ClientUser.
     * @example
     * // Create one ClientUser
     * const ClientUser = await prisma.clientUser.create({
     *   data: {
     *     // ... data to create a ClientUser
     *   }
     * })
     * 
    **/
    create<T extends ClientUserCreateArgs>(
      args: SelectSubset<T, ClientUserCreateArgs>
    ): Prisma__ClientUserClient<ClientUserGetPayload<T>>

    /**
     * Create many ClientUsers.
     *     @param {ClientUserCreateManyArgs} args - Arguments to create many ClientUsers.
     *     @example
     *     // Create many ClientUsers
     *     const clientUser = await prisma.clientUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientUserCreateManyArgs>(
      args?: SelectSubset<T, ClientUserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClientUser.
     * @param {ClientUserDeleteArgs} args - Arguments to delete one ClientUser.
     * @example
     * // Delete one ClientUser
     * const ClientUser = await prisma.clientUser.delete({
     *   where: {
     *     // ... filter to delete one ClientUser
     *   }
     * })
     * 
    **/
    delete<T extends ClientUserDeleteArgs>(
      args: SelectSubset<T, ClientUserDeleteArgs>
    ): Prisma__ClientUserClient<ClientUserGetPayload<T>>

    /**
     * Update one ClientUser.
     * @param {ClientUserUpdateArgs} args - Arguments to update one ClientUser.
     * @example
     * // Update one ClientUser
     * const clientUser = await prisma.clientUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientUserUpdateArgs>(
      args: SelectSubset<T, ClientUserUpdateArgs>
    ): Prisma__ClientUserClient<ClientUserGetPayload<T>>

    /**
     * Delete zero or more ClientUsers.
     * @param {ClientUserDeleteManyArgs} args - Arguments to filter ClientUsers to delete.
     * @example
     * // Delete a few ClientUsers
     * const { count } = await prisma.clientUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientUserDeleteManyArgs>(
      args?: SelectSubset<T, ClientUserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClientUsers
     * const clientUser = await prisma.clientUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientUserUpdateManyArgs>(
      args: SelectSubset<T, ClientUserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClientUser.
     * @param {ClientUserUpsertArgs} args - Arguments to update or create a ClientUser.
     * @example
     * // Update or create a ClientUser
     * const clientUser = await prisma.clientUser.upsert({
     *   create: {
     *     // ... data to create a ClientUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClientUser we want to update
     *   }
     * })
    **/
    upsert<T extends ClientUserUpsertArgs>(
      args: SelectSubset<T, ClientUserUpsertArgs>
    ): Prisma__ClientUserClient<ClientUserGetPayload<T>>

    /**
     * Count the number of ClientUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUserCountArgs} args - Arguments to filter ClientUsers to count.
     * @example
     * // Count the number of ClientUsers
     * const count = await prisma.clientUser.count({
     *   where: {
     *     // ... the filter for the ClientUsers we want to count
     *   }
     * })
    **/
    count<T extends ClientUserCountArgs>(
      args?: Subset<T, ClientUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClientUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientUserAggregateArgs>(args: Subset<T, ClientUserAggregateArgs>): Prisma.PrismaPromise<GetClientUserAggregateType<T>>

    /**
     * Group by ClientUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientUserGroupByArgs['orderBy'] }
        : { orderBy?: ClientUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ClientUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClientUserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Client<T extends ClientArgs= {}>(args?: Subset<T, ClientArgs>): Prisma__ClientClient<ClientGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ClientUser base type for findUnique actions
   */
  export type ClientUserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ClientUser
     */
    select?: ClientUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientUserInclude | null
    /**
     * Filter, which ClientUser to fetch.
     */
    where: ClientUserWhereUniqueInput
  }

  /**
   * ClientUser findUnique
   */
  export interface ClientUserFindUniqueArgs extends ClientUserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ClientUser findUniqueOrThrow
   */
  export type ClientUserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ClientUser
     */
    select?: ClientUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientUserInclude | null
    /**
     * Filter, which ClientUser to fetch.
     */
    where: ClientUserWhereUniqueInput
  }


  /**
   * ClientUser base type for findFirst actions
   */
  export type ClientUserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ClientUser
     */
    select?: ClientUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientUserInclude | null
    /**
     * Filter, which ClientUser to fetch.
     */
    where?: ClientUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientUsers to fetch.
     */
    orderBy?: Enumerable<ClientUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientUsers.
     */
    cursor?: ClientUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientUsers.
     */
    distinct?: Enumerable<ClientUserScalarFieldEnum>
  }

  /**
   * ClientUser findFirst
   */
  export interface ClientUserFindFirstArgs extends ClientUserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ClientUser findFirstOrThrow
   */
  export type ClientUserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ClientUser
     */
    select?: ClientUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientUserInclude | null
    /**
     * Filter, which ClientUser to fetch.
     */
    where?: ClientUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientUsers to fetch.
     */
    orderBy?: Enumerable<ClientUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientUsers.
     */
    cursor?: ClientUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientUsers.
     */
    distinct?: Enumerable<ClientUserScalarFieldEnum>
  }


  /**
   * ClientUser findMany
   */
  export type ClientUserFindManyArgs = {
    /**
     * Select specific fields to fetch from the ClientUser
     */
    select?: ClientUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientUserInclude | null
    /**
     * Filter, which ClientUsers to fetch.
     */
    where?: ClientUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientUsers to fetch.
     */
    orderBy?: Enumerable<ClientUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClientUsers.
     */
    cursor?: ClientUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientUsers.
     */
    skip?: number
    distinct?: Enumerable<ClientUserScalarFieldEnum>
  }


  /**
   * ClientUser create
   */
  export type ClientUserCreateArgs = {
    /**
     * Select specific fields to fetch from the ClientUser
     */
    select?: ClientUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientUserInclude | null
    /**
     * The data needed to create a ClientUser.
     */
    data: XOR<ClientUserCreateInput, ClientUserUncheckedCreateInput>
  }


  /**
   * ClientUser createMany
   */
  export type ClientUserCreateManyArgs = {
    /**
     * The data used to create many ClientUsers.
     */
    data: Enumerable<ClientUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ClientUser update
   */
  export type ClientUserUpdateArgs = {
    /**
     * Select specific fields to fetch from the ClientUser
     */
    select?: ClientUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientUserInclude | null
    /**
     * The data needed to update a ClientUser.
     */
    data: XOR<ClientUserUpdateInput, ClientUserUncheckedUpdateInput>
    /**
     * Choose, which ClientUser to update.
     */
    where: ClientUserWhereUniqueInput
  }


  /**
   * ClientUser updateMany
   */
  export type ClientUserUpdateManyArgs = {
    /**
     * The data used to update ClientUsers.
     */
    data: XOR<ClientUserUpdateManyMutationInput, ClientUserUncheckedUpdateManyInput>
    /**
     * Filter which ClientUsers to update
     */
    where?: ClientUserWhereInput
  }


  /**
   * ClientUser upsert
   */
  export type ClientUserUpsertArgs = {
    /**
     * Select specific fields to fetch from the ClientUser
     */
    select?: ClientUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientUserInclude | null
    /**
     * The filter to search for the ClientUser to update in case it exists.
     */
    where: ClientUserWhereUniqueInput
    /**
     * In case the ClientUser found by the `where` argument doesn't exist, create a new ClientUser with this data.
     */
    create: XOR<ClientUserCreateInput, ClientUserUncheckedCreateInput>
    /**
     * In case the ClientUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUserUpdateInput, ClientUserUncheckedUpdateInput>
  }


  /**
   * ClientUser delete
   */
  export type ClientUserDeleteArgs = {
    /**
     * Select specific fields to fetch from the ClientUser
     */
    select?: ClientUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientUserInclude | null
    /**
     * Filter which ClientUser to delete.
     */
    where: ClientUserWhereUniqueInput
  }


  /**
   * ClientUser deleteMany
   */
  export type ClientUserDeleteManyArgs = {
    /**
     * Filter which ClientUsers to delete
     */
    where?: ClientUserWhereInput
  }


  /**
   * ClientUser without action
   */
  export type ClientUserArgs = {
    /**
     * Select specific fields to fetch from the ClientUser
     */
    select?: ClientUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientUserInclude | null
  }



  /**
   * Model ClientAccess
   */


  export type AggregateClientAccess = {
    _count: ClientAccessCountAggregateOutputType | null
    _avg: ClientAccessAvgAggregateOutputType | null
    _sum: ClientAccessSumAggregateOutputType | null
    _min: ClientAccessMinAggregateOutputType | null
    _max: ClientAccessMaxAggregateOutputType | null
  }

  export type ClientAccessAvgAggregateOutputType = {
    accessId: number | null
    clientId: number | null
  }

  export type ClientAccessSumAggregateOutputType = {
    accessId: number | null
    clientId: number | null
  }

  export type ClientAccessMinAggregateOutputType = {
    accessId: number | null
    clientId: number | null
    created_at: Date | null
    updated_at: Date | null
    id: string | null
  }

  export type ClientAccessMaxAggregateOutputType = {
    accessId: number | null
    clientId: number | null
    created_at: Date | null
    updated_at: Date | null
    id: string | null
  }

  export type ClientAccessCountAggregateOutputType = {
    accessId: number
    clientId: number
    created_at: number
    updated_at: number
    id: number
    _all: number
  }


  export type ClientAccessAvgAggregateInputType = {
    accessId?: true
    clientId?: true
  }

  export type ClientAccessSumAggregateInputType = {
    accessId?: true
    clientId?: true
  }

  export type ClientAccessMinAggregateInputType = {
    accessId?: true
    clientId?: true
    created_at?: true
    updated_at?: true
    id?: true
  }

  export type ClientAccessMaxAggregateInputType = {
    accessId?: true
    clientId?: true
    created_at?: true
    updated_at?: true
    id?: true
  }

  export type ClientAccessCountAggregateInputType = {
    accessId?: true
    clientId?: true
    created_at?: true
    updated_at?: true
    id?: true
    _all?: true
  }

  export type ClientAccessAggregateArgs = {
    /**
     * Filter which ClientAccess to aggregate.
     */
    where?: ClientAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientAccesses to fetch.
     */
    orderBy?: Enumerable<ClientAccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClientAccesses
    **/
    _count?: true | ClientAccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAccessAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientAccessSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientAccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientAccessMaxAggregateInputType
  }

  export type GetClientAccessAggregateType<T extends ClientAccessAggregateArgs> = {
        [P in keyof T & keyof AggregateClientAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientAccess[P]>
      : GetScalarType<T[P], AggregateClientAccess[P]>
  }




  export type ClientAccessGroupByArgs = {
    where?: ClientAccessWhereInput
    orderBy?: Enumerable<ClientAccessOrderByWithAggregationInput>
    by: ClientAccessScalarFieldEnum[]
    having?: ClientAccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientAccessCountAggregateInputType | true
    _avg?: ClientAccessAvgAggregateInputType
    _sum?: ClientAccessSumAggregateInputType
    _min?: ClientAccessMinAggregateInputType
    _max?: ClientAccessMaxAggregateInputType
  }


  export type ClientAccessGroupByOutputType = {
    accessId: number
    clientId: number
    created_at: Date
    updated_at: Date
    id: string
    _count: ClientAccessCountAggregateOutputType | null
    _avg: ClientAccessAvgAggregateOutputType | null
    _sum: ClientAccessSumAggregateOutputType | null
    _min: ClientAccessMinAggregateOutputType | null
    _max: ClientAccessMaxAggregateOutputType | null
  }

  type GetClientAccessGroupByPayload<T extends ClientAccessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClientAccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientAccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientAccessGroupByOutputType[P]>
            : GetScalarType<T[P], ClientAccessGroupByOutputType[P]>
        }
      >
    >


  export type ClientAccessSelect = {
    accessId?: boolean
    clientId?: boolean
    created_at?: boolean
    updated_at?: boolean
    id?: boolean
    access?: boolean | AccessArgs
    Client?: boolean | ClientArgs
  }


  export type ClientAccessInclude = {
    access?: boolean | AccessArgs
    Client?: boolean | ClientArgs
  }

  export type ClientAccessGetPayload<S extends boolean | null | undefined | ClientAccessArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClientAccess :
    S extends undefined ? never :
    S extends { include: any } & (ClientAccessArgs | ClientAccessFindManyArgs)
    ? ClientAccess  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'access' ? AccessGetPayload<S['include'][P]> :
        P extends 'Client' ? ClientGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ClientAccessArgs | ClientAccessFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'access' ? AccessGetPayload<S['select'][P]> :
        P extends 'Client' ? ClientGetPayload<S['select'][P]> :  P extends keyof ClientAccess ? ClientAccess[P] : never
  } 
      : ClientAccess


  type ClientAccessCountArgs = 
    Omit<ClientAccessFindManyArgs, 'select' | 'include'> & {
      select?: ClientAccessCountAggregateInputType | true
    }

  export interface ClientAccessDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ClientAccess that matches the filter.
     * @param {ClientAccessFindUniqueArgs} args - Arguments to find a ClientAccess
     * @example
     * // Get one ClientAccess
     * const clientAccess = await prisma.clientAccess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientAccessFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClientAccessFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ClientAccess'> extends True ? Prisma__ClientAccessClient<ClientAccessGetPayload<T>> : Prisma__ClientAccessClient<ClientAccessGetPayload<T> | null, null>

    /**
     * Find one ClientAccess that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClientAccessFindUniqueOrThrowArgs} args - Arguments to find a ClientAccess
     * @example
     * // Get one ClientAccess
     * const clientAccess = await prisma.clientAccess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClientAccessFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClientAccessFindUniqueOrThrowArgs>
    ): Prisma__ClientAccessClient<ClientAccessGetPayload<T>>

    /**
     * Find the first ClientAccess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAccessFindFirstArgs} args - Arguments to find a ClientAccess
     * @example
     * // Get one ClientAccess
     * const clientAccess = await prisma.clientAccess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientAccessFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClientAccessFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ClientAccess'> extends True ? Prisma__ClientAccessClient<ClientAccessGetPayload<T>> : Prisma__ClientAccessClient<ClientAccessGetPayload<T> | null, null>

    /**
     * Find the first ClientAccess that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAccessFindFirstOrThrowArgs} args - Arguments to find a ClientAccess
     * @example
     * // Get one ClientAccess
     * const clientAccess = await prisma.clientAccess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClientAccessFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClientAccessFindFirstOrThrowArgs>
    ): Prisma__ClientAccessClient<ClientAccessGetPayload<T>>

    /**
     * Find zero or more ClientAccesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAccessFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClientAccesses
     * const clientAccesses = await prisma.clientAccess.findMany()
     * 
     * // Get first 10 ClientAccesses
     * const clientAccesses = await prisma.clientAccess.findMany({ take: 10 })
     * 
     * // Only select the `accessId`
     * const clientAccessWithAccessIdOnly = await prisma.clientAccess.findMany({ select: { accessId: true } })
     * 
    **/
    findMany<T extends ClientAccessFindManyArgs>(
      args?: SelectSubset<T, ClientAccessFindManyArgs>
    ): Prisma.PrismaPromise<Array<ClientAccessGetPayload<T>>>

    /**
     * Create a ClientAccess.
     * @param {ClientAccessCreateArgs} args - Arguments to create a ClientAccess.
     * @example
     * // Create one ClientAccess
     * const ClientAccess = await prisma.clientAccess.create({
     *   data: {
     *     // ... data to create a ClientAccess
     *   }
     * })
     * 
    **/
    create<T extends ClientAccessCreateArgs>(
      args: SelectSubset<T, ClientAccessCreateArgs>
    ): Prisma__ClientAccessClient<ClientAccessGetPayload<T>>

    /**
     * Create many ClientAccesses.
     *     @param {ClientAccessCreateManyArgs} args - Arguments to create many ClientAccesses.
     *     @example
     *     // Create many ClientAccesses
     *     const clientAccess = await prisma.clientAccess.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientAccessCreateManyArgs>(
      args?: SelectSubset<T, ClientAccessCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClientAccess.
     * @param {ClientAccessDeleteArgs} args - Arguments to delete one ClientAccess.
     * @example
     * // Delete one ClientAccess
     * const ClientAccess = await prisma.clientAccess.delete({
     *   where: {
     *     // ... filter to delete one ClientAccess
     *   }
     * })
     * 
    **/
    delete<T extends ClientAccessDeleteArgs>(
      args: SelectSubset<T, ClientAccessDeleteArgs>
    ): Prisma__ClientAccessClient<ClientAccessGetPayload<T>>

    /**
     * Update one ClientAccess.
     * @param {ClientAccessUpdateArgs} args - Arguments to update one ClientAccess.
     * @example
     * // Update one ClientAccess
     * const clientAccess = await prisma.clientAccess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientAccessUpdateArgs>(
      args: SelectSubset<T, ClientAccessUpdateArgs>
    ): Prisma__ClientAccessClient<ClientAccessGetPayload<T>>

    /**
     * Delete zero or more ClientAccesses.
     * @param {ClientAccessDeleteManyArgs} args - Arguments to filter ClientAccesses to delete.
     * @example
     * // Delete a few ClientAccesses
     * const { count } = await prisma.clientAccess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientAccessDeleteManyArgs>(
      args?: SelectSubset<T, ClientAccessDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClientAccesses
     * const clientAccess = await prisma.clientAccess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientAccessUpdateManyArgs>(
      args: SelectSubset<T, ClientAccessUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClientAccess.
     * @param {ClientAccessUpsertArgs} args - Arguments to update or create a ClientAccess.
     * @example
     * // Update or create a ClientAccess
     * const clientAccess = await prisma.clientAccess.upsert({
     *   create: {
     *     // ... data to create a ClientAccess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClientAccess we want to update
     *   }
     * })
    **/
    upsert<T extends ClientAccessUpsertArgs>(
      args: SelectSubset<T, ClientAccessUpsertArgs>
    ): Prisma__ClientAccessClient<ClientAccessGetPayload<T>>

    /**
     * Count the number of ClientAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAccessCountArgs} args - Arguments to filter ClientAccesses to count.
     * @example
     * // Count the number of ClientAccesses
     * const count = await prisma.clientAccess.count({
     *   where: {
     *     // ... the filter for the ClientAccesses we want to count
     *   }
     * })
    **/
    count<T extends ClientAccessCountArgs>(
      args?: Subset<T, ClientAccessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientAccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClientAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAccessAggregateArgs>(args: Subset<T, ClientAccessAggregateArgs>): Prisma.PrismaPromise<GetClientAccessAggregateType<T>>

    /**
     * Group by ClientAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientAccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientAccessGroupByArgs['orderBy'] }
        : { orderBy?: ClientAccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ClientAccess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClientAccessClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    access<T extends AccessArgs= {}>(args?: Subset<T, AccessArgs>): Prisma__AccessClient<AccessGetPayload<T> | Null>;

    Client<T extends ClientArgs= {}>(args?: Subset<T, ClientArgs>): Prisma__ClientClient<ClientGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ClientAccess base type for findUnique actions
   */
  export type ClientAccessFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ClientAccess
     */
    select?: ClientAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientAccessInclude | null
    /**
     * Filter, which ClientAccess to fetch.
     */
    where: ClientAccessWhereUniqueInput
  }

  /**
   * ClientAccess findUnique
   */
  export interface ClientAccessFindUniqueArgs extends ClientAccessFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ClientAccess findUniqueOrThrow
   */
  export type ClientAccessFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ClientAccess
     */
    select?: ClientAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientAccessInclude | null
    /**
     * Filter, which ClientAccess to fetch.
     */
    where: ClientAccessWhereUniqueInput
  }


  /**
   * ClientAccess base type for findFirst actions
   */
  export type ClientAccessFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ClientAccess
     */
    select?: ClientAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientAccessInclude | null
    /**
     * Filter, which ClientAccess to fetch.
     */
    where?: ClientAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientAccesses to fetch.
     */
    orderBy?: Enumerable<ClientAccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientAccesses.
     */
    cursor?: ClientAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientAccesses.
     */
    distinct?: Enumerable<ClientAccessScalarFieldEnum>
  }

  /**
   * ClientAccess findFirst
   */
  export interface ClientAccessFindFirstArgs extends ClientAccessFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ClientAccess findFirstOrThrow
   */
  export type ClientAccessFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ClientAccess
     */
    select?: ClientAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientAccessInclude | null
    /**
     * Filter, which ClientAccess to fetch.
     */
    where?: ClientAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientAccesses to fetch.
     */
    orderBy?: Enumerable<ClientAccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientAccesses.
     */
    cursor?: ClientAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientAccesses.
     */
    distinct?: Enumerable<ClientAccessScalarFieldEnum>
  }


  /**
   * ClientAccess findMany
   */
  export type ClientAccessFindManyArgs = {
    /**
     * Select specific fields to fetch from the ClientAccess
     */
    select?: ClientAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientAccessInclude | null
    /**
     * Filter, which ClientAccesses to fetch.
     */
    where?: ClientAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientAccesses to fetch.
     */
    orderBy?: Enumerable<ClientAccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClientAccesses.
     */
    cursor?: ClientAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientAccesses.
     */
    skip?: number
    distinct?: Enumerable<ClientAccessScalarFieldEnum>
  }


  /**
   * ClientAccess create
   */
  export type ClientAccessCreateArgs = {
    /**
     * Select specific fields to fetch from the ClientAccess
     */
    select?: ClientAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientAccessInclude | null
    /**
     * The data needed to create a ClientAccess.
     */
    data: XOR<ClientAccessCreateInput, ClientAccessUncheckedCreateInput>
  }


  /**
   * ClientAccess createMany
   */
  export type ClientAccessCreateManyArgs = {
    /**
     * The data used to create many ClientAccesses.
     */
    data: Enumerable<ClientAccessCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ClientAccess update
   */
  export type ClientAccessUpdateArgs = {
    /**
     * Select specific fields to fetch from the ClientAccess
     */
    select?: ClientAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientAccessInclude | null
    /**
     * The data needed to update a ClientAccess.
     */
    data: XOR<ClientAccessUpdateInput, ClientAccessUncheckedUpdateInput>
    /**
     * Choose, which ClientAccess to update.
     */
    where: ClientAccessWhereUniqueInput
  }


  /**
   * ClientAccess updateMany
   */
  export type ClientAccessUpdateManyArgs = {
    /**
     * The data used to update ClientAccesses.
     */
    data: XOR<ClientAccessUpdateManyMutationInput, ClientAccessUncheckedUpdateManyInput>
    /**
     * Filter which ClientAccesses to update
     */
    where?: ClientAccessWhereInput
  }


  /**
   * ClientAccess upsert
   */
  export type ClientAccessUpsertArgs = {
    /**
     * Select specific fields to fetch from the ClientAccess
     */
    select?: ClientAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientAccessInclude | null
    /**
     * The filter to search for the ClientAccess to update in case it exists.
     */
    where: ClientAccessWhereUniqueInput
    /**
     * In case the ClientAccess found by the `where` argument doesn't exist, create a new ClientAccess with this data.
     */
    create: XOR<ClientAccessCreateInput, ClientAccessUncheckedCreateInput>
    /**
     * In case the ClientAccess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientAccessUpdateInput, ClientAccessUncheckedUpdateInput>
  }


  /**
   * ClientAccess delete
   */
  export type ClientAccessDeleteArgs = {
    /**
     * Select specific fields to fetch from the ClientAccess
     */
    select?: ClientAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientAccessInclude | null
    /**
     * Filter which ClientAccess to delete.
     */
    where: ClientAccessWhereUniqueInput
  }


  /**
   * ClientAccess deleteMany
   */
  export type ClientAccessDeleteManyArgs = {
    /**
     * Filter which ClientAccesses to delete
     */
    where?: ClientAccessWhereInput
  }


  /**
   * ClientAccess without action
   */
  export type ClientAccessArgs = {
    /**
     * Select specific fields to fetch from the ClientAccess
     */
    select?: ClientAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientAccessInclude | null
  }



  /**
   * Model Company
   */


  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    id: number | null
  }

  export type CompanySumAggregateOutputType = {
    id: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: number | null
    name: string | null
    cnpj: string | null
    email: string | null
    role: RoleUser | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    cnpj: string | null
    email: string | null
    role: RoleUser | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number
    cnpj: number
    email: number
    role: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    id?: true
  }

  export type CompanySumAggregateInputType = {
    id?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    cnpj?: true
    email?: true
    role?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    cnpj?: true
    email?: true
    role?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    cnpj?: true
    email?: true
    role?: true
    _all?: true
  }

  export type CompanyAggregateArgs = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs = {
    where?: CompanyWhereInput
    orderBy?: Enumerable<CompanyOrderByWithAggregationInput>
    by: CompanyScalarFieldEnum[]
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }


  export type CompanyGroupByOutputType = {
    id: number
    name: string
    cnpj: string
    email: string
    role: RoleUser
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect = {
    id?: boolean
    name?: boolean
    cnpj?: boolean
    email?: boolean
    role?: boolean
  }


  export type CompanyGetPayload<S extends boolean | null | undefined | CompanyArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Company :
    S extends undefined ? never :
    S extends { include: any } & (CompanyArgs | CompanyFindManyArgs)
    ? Company 
    : S extends { select: any } & (CompanyArgs | CompanyFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Company ? Company[P] : never
  } 
      : Company


  type CompanyCountArgs = 
    Omit<CompanyFindManyArgs, 'select' | 'include'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompanyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompanyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Company'> extends True ? Prisma__CompanyClient<CompanyGetPayload<T>> : Prisma__CompanyClient<CompanyGetPayload<T> | null, null>

    /**
     * Find one Company that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CompanyFindUniqueOrThrowArgs>
    ): Prisma__CompanyClient<CompanyGetPayload<T>>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompanyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompanyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Company'> extends True ? Prisma__CompanyClient<CompanyGetPayload<T>> : Prisma__CompanyClient<CompanyGetPayload<T> | null, null>

    /**
     * Find the first Company that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CompanyFindFirstOrThrowArgs>
    ): Prisma__CompanyClient<CompanyGetPayload<T>>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompanyFindManyArgs>(
      args?: SelectSubset<T, CompanyFindManyArgs>
    ): Prisma.PrismaPromise<Array<CompanyGetPayload<T>>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
    **/
    create<T extends CompanyCreateArgs>(
      args: SelectSubset<T, CompanyCreateArgs>
    ): Prisma__CompanyClient<CompanyGetPayload<T>>

    /**
     * Create many Companies.
     *     @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     *     @example
     *     // Create many Companies
     *     const company = await prisma.company.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompanyCreateManyArgs>(
      args?: SelectSubset<T, CompanyCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
    **/
    delete<T extends CompanyDeleteArgs>(
      args: SelectSubset<T, CompanyDeleteArgs>
    ): Prisma__CompanyClient<CompanyGetPayload<T>>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompanyUpdateArgs>(
      args: SelectSubset<T, CompanyUpdateArgs>
    ): Prisma__CompanyClient<CompanyGetPayload<T>>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompanyDeleteManyArgs>(
      args?: SelectSubset<T, CompanyDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompanyUpdateManyArgs>(
      args: SelectSubset<T, CompanyUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
    **/
    upsert<T extends CompanyUpsertArgs>(
      args: SelectSubset<T, CompanyUpsertArgs>
    ): Prisma__CompanyClient<CompanyGetPayload<T>>

    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompanyClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Company base type for findUnique actions
   */
  export type CompanyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUnique
   */
  export interface CompanyFindUniqueArgs extends CompanyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company base type for findFirst actions
   */
  export type CompanyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }

  /**
   * Company findFirst
   */
  export interface CompanyFindFirstArgs extends CompanyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }


  /**
   * Company findMany
   */
  export type CompanyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }


  /**
   * Company create
   */
  export type CompanyCreateArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }


  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs = {
    /**
     * The data used to create many Companies.
     */
    data: Enumerable<CompanyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Company update
   */
  export type CompanyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }


  /**
   * Company upsert
   */
  export type CompanyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }


  /**
   * Company delete
   */
  export type CompanyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }


  /**
   * Company without action
   */
  export type CompanyArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
  }



  /**
   * Model Access
   */


  export type AggregateAccess = {
    _count: AccessCountAggregateOutputType | null
    _avg: AccessAvgAggregateOutputType | null
    _sum: AccessSumAggregateOutputType | null
    _min: AccessMinAggregateOutputType | null
    _max: AccessMaxAggregateOutputType | null
  }

  export type AccessAvgAggregateOutputType = {
    id: number | null
    type: number | null
  }

  export type AccessSumAggregateOutputType = {
    id: number | null
    type: number | null
  }

  export type AccessMinAggregateOutputType = {
    id: number | null
    type: number | null
    server: boolean | null
    access: string | null
    desc: string | null
  }

  export type AccessMaxAggregateOutputType = {
    id: number | null
    type: number | null
    server: boolean | null
    access: string | null
    desc: string | null
  }

  export type AccessCountAggregateOutputType = {
    id: number
    type: number
    server: number
    access: number
    desc: number
    _all: number
  }


  export type AccessAvgAggregateInputType = {
    id?: true
    type?: true
  }

  export type AccessSumAggregateInputType = {
    id?: true
    type?: true
  }

  export type AccessMinAggregateInputType = {
    id?: true
    type?: true
    server?: true
    access?: true
    desc?: true
  }

  export type AccessMaxAggregateInputType = {
    id?: true
    type?: true
    server?: true
    access?: true
    desc?: true
  }

  export type AccessCountAggregateInputType = {
    id?: true
    type?: true
    server?: true
    access?: true
    desc?: true
    _all?: true
  }

  export type AccessAggregateArgs = {
    /**
     * Filter which Access to aggregate.
     */
    where?: AccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accesses to fetch.
     */
    orderBy?: Enumerable<AccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accesses
    **/
    _count?: true | AccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccessAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccessSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccessMaxAggregateInputType
  }

  export type GetAccessAggregateType<T extends AccessAggregateArgs> = {
        [P in keyof T & keyof AggregateAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccess[P]>
      : GetScalarType<T[P], AggregateAccess[P]>
  }




  export type AccessGroupByArgs = {
    where?: AccessWhereInput
    orderBy?: Enumerable<AccessOrderByWithAggregationInput>
    by: AccessScalarFieldEnum[]
    having?: AccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccessCountAggregateInputType | true
    _avg?: AccessAvgAggregateInputType
    _sum?: AccessSumAggregateInputType
    _min?: AccessMinAggregateInputType
    _max?: AccessMaxAggregateInputType
  }


  export type AccessGroupByOutputType = {
    id: number
    type: number
    server: boolean
    access: string
    desc: string
    _count: AccessCountAggregateOutputType | null
    _avg: AccessAvgAggregateOutputType | null
    _sum: AccessSumAggregateOutputType | null
    _min: AccessMinAggregateOutputType | null
    _max: AccessMaxAggregateOutputType | null
  }

  type GetAccessGroupByPayload<T extends AccessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccessGroupByOutputType[P]>
            : GetScalarType<T[P], AccessGroupByOutputType[P]>
        }
      >
    >


  export type AccessSelect = {
    id?: boolean
    type?: boolean
    server?: boolean
    access?: boolean
    desc?: boolean
    typeAccess?: boolean | Access$typeAccessArgs
    clients?: boolean | Access$clientsArgs
    _count?: boolean | AccessCountOutputTypeArgs
  }


  export type AccessInclude = {
    typeAccess?: boolean | Access$typeAccessArgs
    clients?: boolean | Access$clientsArgs
    _count?: boolean | AccessCountOutputTypeArgs
  }

  export type AccessGetPayload<S extends boolean | null | undefined | AccessArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Access :
    S extends undefined ? never :
    S extends { include: any } & (AccessArgs | AccessFindManyArgs)
    ? Access  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'typeAccess' ? Array < AccessTypeAccessGetPayload<S['include'][P]>>  :
        P extends 'clients' ? Array < ClientAccessGetPayload<S['include'][P]>>  :
        P extends '_count' ? AccessCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AccessArgs | AccessFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'typeAccess' ? Array < AccessTypeAccessGetPayload<S['select'][P]>>  :
        P extends 'clients' ? Array < ClientAccessGetPayload<S['select'][P]>>  :
        P extends '_count' ? AccessCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Access ? Access[P] : never
  } 
      : Access


  type AccessCountArgs = 
    Omit<AccessFindManyArgs, 'select' | 'include'> & {
      select?: AccessCountAggregateInputType | true
    }

  export interface AccessDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Access that matches the filter.
     * @param {AccessFindUniqueArgs} args - Arguments to find a Access
     * @example
     * // Get one Access
     * const access = await prisma.access.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccessFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccessFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Access'> extends True ? Prisma__AccessClient<AccessGetPayload<T>> : Prisma__AccessClient<AccessGetPayload<T> | null, null>

    /**
     * Find one Access that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccessFindUniqueOrThrowArgs} args - Arguments to find a Access
     * @example
     * // Get one Access
     * const access = await prisma.access.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccessFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AccessFindUniqueOrThrowArgs>
    ): Prisma__AccessClient<AccessGetPayload<T>>

    /**
     * Find the first Access that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessFindFirstArgs} args - Arguments to find a Access
     * @example
     * // Get one Access
     * const access = await prisma.access.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccessFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccessFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Access'> extends True ? Prisma__AccessClient<AccessGetPayload<T>> : Prisma__AccessClient<AccessGetPayload<T> | null, null>

    /**
     * Find the first Access that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessFindFirstOrThrowArgs} args - Arguments to find a Access
     * @example
     * // Get one Access
     * const access = await prisma.access.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccessFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AccessFindFirstOrThrowArgs>
    ): Prisma__AccessClient<AccessGetPayload<T>>

    /**
     * Find zero or more Accesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accesses
     * const accesses = await prisma.access.findMany()
     * 
     * // Get first 10 Accesses
     * const accesses = await prisma.access.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accessWithIdOnly = await prisma.access.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccessFindManyArgs>(
      args?: SelectSubset<T, AccessFindManyArgs>
    ): Prisma.PrismaPromise<Array<AccessGetPayload<T>>>

    /**
     * Create a Access.
     * @param {AccessCreateArgs} args - Arguments to create a Access.
     * @example
     * // Create one Access
     * const Access = await prisma.access.create({
     *   data: {
     *     // ... data to create a Access
     *   }
     * })
     * 
    **/
    create<T extends AccessCreateArgs>(
      args: SelectSubset<T, AccessCreateArgs>
    ): Prisma__AccessClient<AccessGetPayload<T>>

    /**
     * Create many Accesses.
     *     @param {AccessCreateManyArgs} args - Arguments to create many Accesses.
     *     @example
     *     // Create many Accesses
     *     const access = await prisma.access.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccessCreateManyArgs>(
      args?: SelectSubset<T, AccessCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Access.
     * @param {AccessDeleteArgs} args - Arguments to delete one Access.
     * @example
     * // Delete one Access
     * const Access = await prisma.access.delete({
     *   where: {
     *     // ... filter to delete one Access
     *   }
     * })
     * 
    **/
    delete<T extends AccessDeleteArgs>(
      args: SelectSubset<T, AccessDeleteArgs>
    ): Prisma__AccessClient<AccessGetPayload<T>>

    /**
     * Update one Access.
     * @param {AccessUpdateArgs} args - Arguments to update one Access.
     * @example
     * // Update one Access
     * const access = await prisma.access.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccessUpdateArgs>(
      args: SelectSubset<T, AccessUpdateArgs>
    ): Prisma__AccessClient<AccessGetPayload<T>>

    /**
     * Delete zero or more Accesses.
     * @param {AccessDeleteManyArgs} args - Arguments to filter Accesses to delete.
     * @example
     * // Delete a few Accesses
     * const { count } = await prisma.access.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccessDeleteManyArgs>(
      args?: SelectSubset<T, AccessDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accesses
     * const access = await prisma.access.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccessUpdateManyArgs>(
      args: SelectSubset<T, AccessUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Access.
     * @param {AccessUpsertArgs} args - Arguments to update or create a Access.
     * @example
     * // Update or create a Access
     * const access = await prisma.access.upsert({
     *   create: {
     *     // ... data to create a Access
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Access we want to update
     *   }
     * })
    **/
    upsert<T extends AccessUpsertArgs>(
      args: SelectSubset<T, AccessUpsertArgs>
    ): Prisma__AccessClient<AccessGetPayload<T>>

    /**
     * Count the number of Accesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessCountArgs} args - Arguments to filter Accesses to count.
     * @example
     * // Count the number of Accesses
     * const count = await prisma.access.count({
     *   where: {
     *     // ... the filter for the Accesses we want to count
     *   }
     * })
    **/
    count<T extends AccessCountArgs>(
      args?: Subset<T, AccessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Access.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccessAggregateArgs>(args: Subset<T, AccessAggregateArgs>): Prisma.PrismaPromise<GetAccessAggregateType<T>>

    /**
     * Group by Access.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccessGroupByArgs['orderBy'] }
        : { orderBy?: AccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Access.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccessClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    typeAccess<T extends Access$typeAccessArgs= {}>(args?: Subset<T, Access$typeAccessArgs>): Prisma.PrismaPromise<Array<AccessTypeAccessGetPayload<T>>| Null>;

    clients<T extends Access$clientsArgs= {}>(args?: Subset<T, Access$clientsArgs>): Prisma.PrismaPromise<Array<ClientAccessGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Access base type for findUnique actions
   */
  export type AccessFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Access
     */
    select?: AccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessInclude | null
    /**
     * Filter, which Access to fetch.
     */
    where: AccessWhereUniqueInput
  }

  /**
   * Access findUnique
   */
  export interface AccessFindUniqueArgs extends AccessFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Access findUniqueOrThrow
   */
  export type AccessFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Access
     */
    select?: AccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessInclude | null
    /**
     * Filter, which Access to fetch.
     */
    where: AccessWhereUniqueInput
  }


  /**
   * Access base type for findFirst actions
   */
  export type AccessFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Access
     */
    select?: AccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessInclude | null
    /**
     * Filter, which Access to fetch.
     */
    where?: AccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accesses to fetch.
     */
    orderBy?: Enumerable<AccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accesses.
     */
    cursor?: AccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accesses.
     */
    distinct?: Enumerable<AccessScalarFieldEnum>
  }

  /**
   * Access findFirst
   */
  export interface AccessFindFirstArgs extends AccessFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Access findFirstOrThrow
   */
  export type AccessFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Access
     */
    select?: AccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessInclude | null
    /**
     * Filter, which Access to fetch.
     */
    where?: AccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accesses to fetch.
     */
    orderBy?: Enumerable<AccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accesses.
     */
    cursor?: AccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accesses.
     */
    distinct?: Enumerable<AccessScalarFieldEnum>
  }


  /**
   * Access findMany
   */
  export type AccessFindManyArgs = {
    /**
     * Select specific fields to fetch from the Access
     */
    select?: AccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessInclude | null
    /**
     * Filter, which Accesses to fetch.
     */
    where?: AccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accesses to fetch.
     */
    orderBy?: Enumerable<AccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accesses.
     */
    cursor?: AccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accesses.
     */
    skip?: number
    distinct?: Enumerable<AccessScalarFieldEnum>
  }


  /**
   * Access create
   */
  export type AccessCreateArgs = {
    /**
     * Select specific fields to fetch from the Access
     */
    select?: AccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessInclude | null
    /**
     * The data needed to create a Access.
     */
    data: XOR<AccessCreateInput, AccessUncheckedCreateInput>
  }


  /**
   * Access createMany
   */
  export type AccessCreateManyArgs = {
    /**
     * The data used to create many Accesses.
     */
    data: Enumerable<AccessCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Access update
   */
  export type AccessUpdateArgs = {
    /**
     * Select specific fields to fetch from the Access
     */
    select?: AccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessInclude | null
    /**
     * The data needed to update a Access.
     */
    data: XOR<AccessUpdateInput, AccessUncheckedUpdateInput>
    /**
     * Choose, which Access to update.
     */
    where: AccessWhereUniqueInput
  }


  /**
   * Access updateMany
   */
  export type AccessUpdateManyArgs = {
    /**
     * The data used to update Accesses.
     */
    data: XOR<AccessUpdateManyMutationInput, AccessUncheckedUpdateManyInput>
    /**
     * Filter which Accesses to update
     */
    where?: AccessWhereInput
  }


  /**
   * Access upsert
   */
  export type AccessUpsertArgs = {
    /**
     * Select specific fields to fetch from the Access
     */
    select?: AccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessInclude | null
    /**
     * The filter to search for the Access to update in case it exists.
     */
    where: AccessWhereUniqueInput
    /**
     * In case the Access found by the `where` argument doesn't exist, create a new Access with this data.
     */
    create: XOR<AccessCreateInput, AccessUncheckedCreateInput>
    /**
     * In case the Access was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccessUpdateInput, AccessUncheckedUpdateInput>
  }


  /**
   * Access delete
   */
  export type AccessDeleteArgs = {
    /**
     * Select specific fields to fetch from the Access
     */
    select?: AccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessInclude | null
    /**
     * Filter which Access to delete.
     */
    where: AccessWhereUniqueInput
  }


  /**
   * Access deleteMany
   */
  export type AccessDeleteManyArgs = {
    /**
     * Filter which Accesses to delete
     */
    where?: AccessWhereInput
  }


  /**
   * Access.typeAccess
   */
  export type Access$typeAccessArgs = {
    /**
     * Select specific fields to fetch from the AccessTypeAccess
     */
    select?: AccessTypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessTypeAccessInclude | null
    where?: AccessTypeAccessWhereInput
    orderBy?: Enumerable<AccessTypeAccessOrderByWithRelationInput>
    cursor?: AccessTypeAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AccessTypeAccessScalarFieldEnum>
  }


  /**
   * Access.clients
   */
  export type Access$clientsArgs = {
    /**
     * Select specific fields to fetch from the ClientAccess
     */
    select?: ClientAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientAccessInclude | null
    where?: ClientAccessWhereInput
    orderBy?: Enumerable<ClientAccessOrderByWithRelationInput>
    cursor?: ClientAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ClientAccessScalarFieldEnum>
  }


  /**
   * Access without action
   */
  export type AccessArgs = {
    /**
     * Select specific fields to fetch from the Access
     */
    select?: AccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessInclude | null
  }



  /**
   * Model AccessTypeAccess
   */


  export type AggregateAccessTypeAccess = {
    _count: AccessTypeAccessCountAggregateOutputType | null
    _avg: AccessTypeAccessAvgAggregateOutputType | null
    _sum: AccessTypeAccessSumAggregateOutputType | null
    _min: AccessTypeAccessMinAggregateOutputType | null
    _max: AccessTypeAccessMaxAggregateOutputType | null
  }

  export type AccessTypeAccessAvgAggregateOutputType = {
    accessId: number | null
    typeAccessId: number | null
  }

  export type AccessTypeAccessSumAggregateOutputType = {
    accessId: number | null
    typeAccessId: number | null
  }

  export type AccessTypeAccessMinAggregateOutputType = {
    id: string | null
    accessId: number | null
    typeAccessId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AccessTypeAccessMaxAggregateOutputType = {
    id: string | null
    accessId: number | null
    typeAccessId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AccessTypeAccessCountAggregateOutputType = {
    id: number
    accessId: number
    typeAccessId: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type AccessTypeAccessAvgAggregateInputType = {
    accessId?: true
    typeAccessId?: true
  }

  export type AccessTypeAccessSumAggregateInputType = {
    accessId?: true
    typeAccessId?: true
  }

  export type AccessTypeAccessMinAggregateInputType = {
    id?: true
    accessId?: true
    typeAccessId?: true
    created_at?: true
    updated_at?: true
  }

  export type AccessTypeAccessMaxAggregateInputType = {
    id?: true
    accessId?: true
    typeAccessId?: true
    created_at?: true
    updated_at?: true
  }

  export type AccessTypeAccessCountAggregateInputType = {
    id?: true
    accessId?: true
    typeAccessId?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AccessTypeAccessAggregateArgs = {
    /**
     * Filter which AccessTypeAccess to aggregate.
     */
    where?: AccessTypeAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessTypeAccesses to fetch.
     */
    orderBy?: Enumerable<AccessTypeAccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccessTypeAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessTypeAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessTypeAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccessTypeAccesses
    **/
    _count?: true | AccessTypeAccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccessTypeAccessAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccessTypeAccessSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccessTypeAccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccessTypeAccessMaxAggregateInputType
  }

  export type GetAccessTypeAccessAggregateType<T extends AccessTypeAccessAggregateArgs> = {
        [P in keyof T & keyof AggregateAccessTypeAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccessTypeAccess[P]>
      : GetScalarType<T[P], AggregateAccessTypeAccess[P]>
  }




  export type AccessTypeAccessGroupByArgs = {
    where?: AccessTypeAccessWhereInput
    orderBy?: Enumerable<AccessTypeAccessOrderByWithAggregationInput>
    by: AccessTypeAccessScalarFieldEnum[]
    having?: AccessTypeAccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccessTypeAccessCountAggregateInputType | true
    _avg?: AccessTypeAccessAvgAggregateInputType
    _sum?: AccessTypeAccessSumAggregateInputType
    _min?: AccessTypeAccessMinAggregateInputType
    _max?: AccessTypeAccessMaxAggregateInputType
  }


  export type AccessTypeAccessGroupByOutputType = {
    id: string
    accessId: number
    typeAccessId: number
    created_at: Date
    updated_at: Date
    _count: AccessTypeAccessCountAggregateOutputType | null
    _avg: AccessTypeAccessAvgAggregateOutputType | null
    _sum: AccessTypeAccessSumAggregateOutputType | null
    _min: AccessTypeAccessMinAggregateOutputType | null
    _max: AccessTypeAccessMaxAggregateOutputType | null
  }

  type GetAccessTypeAccessGroupByPayload<T extends AccessTypeAccessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AccessTypeAccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccessTypeAccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccessTypeAccessGroupByOutputType[P]>
            : GetScalarType<T[P], AccessTypeAccessGroupByOutputType[P]>
        }
      >
    >


  export type AccessTypeAccessSelect = {
    id?: boolean
    accessId?: boolean
    typeAccessId?: boolean
    created_at?: boolean
    updated_at?: boolean
    access?: boolean | AccessArgs
    typeAccess?: boolean | TypeAccessArgs
  }


  export type AccessTypeAccessInclude = {
    access?: boolean | AccessArgs
    typeAccess?: boolean | TypeAccessArgs
  }

  export type AccessTypeAccessGetPayload<S extends boolean | null | undefined | AccessTypeAccessArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AccessTypeAccess :
    S extends undefined ? never :
    S extends { include: any } & (AccessTypeAccessArgs | AccessTypeAccessFindManyArgs)
    ? AccessTypeAccess  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'access' ? AccessGetPayload<S['include'][P]> :
        P extends 'typeAccess' ? TypeAccessGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AccessTypeAccessArgs | AccessTypeAccessFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'access' ? AccessGetPayload<S['select'][P]> :
        P extends 'typeAccess' ? TypeAccessGetPayload<S['select'][P]> :  P extends keyof AccessTypeAccess ? AccessTypeAccess[P] : never
  } 
      : AccessTypeAccess


  type AccessTypeAccessCountArgs = 
    Omit<AccessTypeAccessFindManyArgs, 'select' | 'include'> & {
      select?: AccessTypeAccessCountAggregateInputType | true
    }

  export interface AccessTypeAccessDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one AccessTypeAccess that matches the filter.
     * @param {AccessTypeAccessFindUniqueArgs} args - Arguments to find a AccessTypeAccess
     * @example
     * // Get one AccessTypeAccess
     * const accessTypeAccess = await prisma.accessTypeAccess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccessTypeAccessFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccessTypeAccessFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AccessTypeAccess'> extends True ? Prisma__AccessTypeAccessClient<AccessTypeAccessGetPayload<T>> : Prisma__AccessTypeAccessClient<AccessTypeAccessGetPayload<T> | null, null>

    /**
     * Find one AccessTypeAccess that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccessTypeAccessFindUniqueOrThrowArgs} args - Arguments to find a AccessTypeAccess
     * @example
     * // Get one AccessTypeAccess
     * const accessTypeAccess = await prisma.accessTypeAccess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccessTypeAccessFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AccessTypeAccessFindUniqueOrThrowArgs>
    ): Prisma__AccessTypeAccessClient<AccessTypeAccessGetPayload<T>>

    /**
     * Find the first AccessTypeAccess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTypeAccessFindFirstArgs} args - Arguments to find a AccessTypeAccess
     * @example
     * // Get one AccessTypeAccess
     * const accessTypeAccess = await prisma.accessTypeAccess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccessTypeAccessFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccessTypeAccessFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AccessTypeAccess'> extends True ? Prisma__AccessTypeAccessClient<AccessTypeAccessGetPayload<T>> : Prisma__AccessTypeAccessClient<AccessTypeAccessGetPayload<T> | null, null>

    /**
     * Find the first AccessTypeAccess that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTypeAccessFindFirstOrThrowArgs} args - Arguments to find a AccessTypeAccess
     * @example
     * // Get one AccessTypeAccess
     * const accessTypeAccess = await prisma.accessTypeAccess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccessTypeAccessFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AccessTypeAccessFindFirstOrThrowArgs>
    ): Prisma__AccessTypeAccessClient<AccessTypeAccessGetPayload<T>>

    /**
     * Find zero or more AccessTypeAccesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTypeAccessFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccessTypeAccesses
     * const accessTypeAccesses = await prisma.accessTypeAccess.findMany()
     * 
     * // Get first 10 AccessTypeAccesses
     * const accessTypeAccesses = await prisma.accessTypeAccess.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accessTypeAccessWithIdOnly = await prisma.accessTypeAccess.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccessTypeAccessFindManyArgs>(
      args?: SelectSubset<T, AccessTypeAccessFindManyArgs>
    ): Prisma.PrismaPromise<Array<AccessTypeAccessGetPayload<T>>>

    /**
     * Create a AccessTypeAccess.
     * @param {AccessTypeAccessCreateArgs} args - Arguments to create a AccessTypeAccess.
     * @example
     * // Create one AccessTypeAccess
     * const AccessTypeAccess = await prisma.accessTypeAccess.create({
     *   data: {
     *     // ... data to create a AccessTypeAccess
     *   }
     * })
     * 
    **/
    create<T extends AccessTypeAccessCreateArgs>(
      args: SelectSubset<T, AccessTypeAccessCreateArgs>
    ): Prisma__AccessTypeAccessClient<AccessTypeAccessGetPayload<T>>

    /**
     * Create many AccessTypeAccesses.
     *     @param {AccessTypeAccessCreateManyArgs} args - Arguments to create many AccessTypeAccesses.
     *     @example
     *     // Create many AccessTypeAccesses
     *     const accessTypeAccess = await prisma.accessTypeAccess.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccessTypeAccessCreateManyArgs>(
      args?: SelectSubset<T, AccessTypeAccessCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccessTypeAccess.
     * @param {AccessTypeAccessDeleteArgs} args - Arguments to delete one AccessTypeAccess.
     * @example
     * // Delete one AccessTypeAccess
     * const AccessTypeAccess = await prisma.accessTypeAccess.delete({
     *   where: {
     *     // ... filter to delete one AccessTypeAccess
     *   }
     * })
     * 
    **/
    delete<T extends AccessTypeAccessDeleteArgs>(
      args: SelectSubset<T, AccessTypeAccessDeleteArgs>
    ): Prisma__AccessTypeAccessClient<AccessTypeAccessGetPayload<T>>

    /**
     * Update one AccessTypeAccess.
     * @param {AccessTypeAccessUpdateArgs} args - Arguments to update one AccessTypeAccess.
     * @example
     * // Update one AccessTypeAccess
     * const accessTypeAccess = await prisma.accessTypeAccess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccessTypeAccessUpdateArgs>(
      args: SelectSubset<T, AccessTypeAccessUpdateArgs>
    ): Prisma__AccessTypeAccessClient<AccessTypeAccessGetPayload<T>>

    /**
     * Delete zero or more AccessTypeAccesses.
     * @param {AccessTypeAccessDeleteManyArgs} args - Arguments to filter AccessTypeAccesses to delete.
     * @example
     * // Delete a few AccessTypeAccesses
     * const { count } = await prisma.accessTypeAccess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccessTypeAccessDeleteManyArgs>(
      args?: SelectSubset<T, AccessTypeAccessDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccessTypeAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTypeAccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccessTypeAccesses
     * const accessTypeAccess = await prisma.accessTypeAccess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccessTypeAccessUpdateManyArgs>(
      args: SelectSubset<T, AccessTypeAccessUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccessTypeAccess.
     * @param {AccessTypeAccessUpsertArgs} args - Arguments to update or create a AccessTypeAccess.
     * @example
     * // Update or create a AccessTypeAccess
     * const accessTypeAccess = await prisma.accessTypeAccess.upsert({
     *   create: {
     *     // ... data to create a AccessTypeAccess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccessTypeAccess we want to update
     *   }
     * })
    **/
    upsert<T extends AccessTypeAccessUpsertArgs>(
      args: SelectSubset<T, AccessTypeAccessUpsertArgs>
    ): Prisma__AccessTypeAccessClient<AccessTypeAccessGetPayload<T>>

    /**
     * Count the number of AccessTypeAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTypeAccessCountArgs} args - Arguments to filter AccessTypeAccesses to count.
     * @example
     * // Count the number of AccessTypeAccesses
     * const count = await prisma.accessTypeAccess.count({
     *   where: {
     *     // ... the filter for the AccessTypeAccesses we want to count
     *   }
     * })
    **/
    count<T extends AccessTypeAccessCountArgs>(
      args?: Subset<T, AccessTypeAccessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccessTypeAccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccessTypeAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTypeAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccessTypeAccessAggregateArgs>(args: Subset<T, AccessTypeAccessAggregateArgs>): Prisma.PrismaPromise<GetAccessTypeAccessAggregateType<T>>

    /**
     * Group by AccessTypeAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTypeAccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccessTypeAccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccessTypeAccessGroupByArgs['orderBy'] }
        : { orderBy?: AccessTypeAccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccessTypeAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccessTypeAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for AccessTypeAccess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccessTypeAccessClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    access<T extends AccessArgs= {}>(args?: Subset<T, AccessArgs>): Prisma__AccessClient<AccessGetPayload<T> | Null>;

    typeAccess<T extends TypeAccessArgs= {}>(args?: Subset<T, TypeAccessArgs>): Prisma__TypeAccessClient<TypeAccessGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * AccessTypeAccess base type for findUnique actions
   */
  export type AccessTypeAccessFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the AccessTypeAccess
     */
    select?: AccessTypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessTypeAccessInclude | null
    /**
     * Filter, which AccessTypeAccess to fetch.
     */
    where: AccessTypeAccessWhereUniqueInput
  }

  /**
   * AccessTypeAccess findUnique
   */
  export interface AccessTypeAccessFindUniqueArgs extends AccessTypeAccessFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AccessTypeAccess findUniqueOrThrow
   */
  export type AccessTypeAccessFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the AccessTypeAccess
     */
    select?: AccessTypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessTypeAccessInclude | null
    /**
     * Filter, which AccessTypeAccess to fetch.
     */
    where: AccessTypeAccessWhereUniqueInput
  }


  /**
   * AccessTypeAccess base type for findFirst actions
   */
  export type AccessTypeAccessFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the AccessTypeAccess
     */
    select?: AccessTypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessTypeAccessInclude | null
    /**
     * Filter, which AccessTypeAccess to fetch.
     */
    where?: AccessTypeAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessTypeAccesses to fetch.
     */
    orderBy?: Enumerable<AccessTypeAccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccessTypeAccesses.
     */
    cursor?: AccessTypeAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessTypeAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessTypeAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccessTypeAccesses.
     */
    distinct?: Enumerable<AccessTypeAccessScalarFieldEnum>
  }

  /**
   * AccessTypeAccess findFirst
   */
  export interface AccessTypeAccessFindFirstArgs extends AccessTypeAccessFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AccessTypeAccess findFirstOrThrow
   */
  export type AccessTypeAccessFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the AccessTypeAccess
     */
    select?: AccessTypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessTypeAccessInclude | null
    /**
     * Filter, which AccessTypeAccess to fetch.
     */
    where?: AccessTypeAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessTypeAccesses to fetch.
     */
    orderBy?: Enumerable<AccessTypeAccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccessTypeAccesses.
     */
    cursor?: AccessTypeAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessTypeAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessTypeAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccessTypeAccesses.
     */
    distinct?: Enumerable<AccessTypeAccessScalarFieldEnum>
  }


  /**
   * AccessTypeAccess findMany
   */
  export type AccessTypeAccessFindManyArgs = {
    /**
     * Select specific fields to fetch from the AccessTypeAccess
     */
    select?: AccessTypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessTypeAccessInclude | null
    /**
     * Filter, which AccessTypeAccesses to fetch.
     */
    where?: AccessTypeAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessTypeAccesses to fetch.
     */
    orderBy?: Enumerable<AccessTypeAccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccessTypeAccesses.
     */
    cursor?: AccessTypeAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessTypeAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessTypeAccesses.
     */
    skip?: number
    distinct?: Enumerable<AccessTypeAccessScalarFieldEnum>
  }


  /**
   * AccessTypeAccess create
   */
  export type AccessTypeAccessCreateArgs = {
    /**
     * Select specific fields to fetch from the AccessTypeAccess
     */
    select?: AccessTypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessTypeAccessInclude | null
    /**
     * The data needed to create a AccessTypeAccess.
     */
    data: XOR<AccessTypeAccessCreateInput, AccessTypeAccessUncheckedCreateInput>
  }


  /**
   * AccessTypeAccess createMany
   */
  export type AccessTypeAccessCreateManyArgs = {
    /**
     * The data used to create many AccessTypeAccesses.
     */
    data: Enumerable<AccessTypeAccessCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AccessTypeAccess update
   */
  export type AccessTypeAccessUpdateArgs = {
    /**
     * Select specific fields to fetch from the AccessTypeAccess
     */
    select?: AccessTypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessTypeAccessInclude | null
    /**
     * The data needed to update a AccessTypeAccess.
     */
    data: XOR<AccessTypeAccessUpdateInput, AccessTypeAccessUncheckedUpdateInput>
    /**
     * Choose, which AccessTypeAccess to update.
     */
    where: AccessTypeAccessWhereUniqueInput
  }


  /**
   * AccessTypeAccess updateMany
   */
  export type AccessTypeAccessUpdateManyArgs = {
    /**
     * The data used to update AccessTypeAccesses.
     */
    data: XOR<AccessTypeAccessUpdateManyMutationInput, AccessTypeAccessUncheckedUpdateManyInput>
    /**
     * Filter which AccessTypeAccesses to update
     */
    where?: AccessTypeAccessWhereInput
  }


  /**
   * AccessTypeAccess upsert
   */
  export type AccessTypeAccessUpsertArgs = {
    /**
     * Select specific fields to fetch from the AccessTypeAccess
     */
    select?: AccessTypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessTypeAccessInclude | null
    /**
     * The filter to search for the AccessTypeAccess to update in case it exists.
     */
    where: AccessTypeAccessWhereUniqueInput
    /**
     * In case the AccessTypeAccess found by the `where` argument doesn't exist, create a new AccessTypeAccess with this data.
     */
    create: XOR<AccessTypeAccessCreateInput, AccessTypeAccessUncheckedCreateInput>
    /**
     * In case the AccessTypeAccess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccessTypeAccessUpdateInput, AccessTypeAccessUncheckedUpdateInput>
  }


  /**
   * AccessTypeAccess delete
   */
  export type AccessTypeAccessDeleteArgs = {
    /**
     * Select specific fields to fetch from the AccessTypeAccess
     */
    select?: AccessTypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessTypeAccessInclude | null
    /**
     * Filter which AccessTypeAccess to delete.
     */
    where: AccessTypeAccessWhereUniqueInput
  }


  /**
   * AccessTypeAccess deleteMany
   */
  export type AccessTypeAccessDeleteManyArgs = {
    /**
     * Filter which AccessTypeAccesses to delete
     */
    where?: AccessTypeAccessWhereInput
  }


  /**
   * AccessTypeAccess without action
   */
  export type AccessTypeAccessArgs = {
    /**
     * Select specific fields to fetch from the AccessTypeAccess
     */
    select?: AccessTypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessTypeAccessInclude | null
  }



  /**
   * Model TypeAccess
   */


  export type AggregateTypeAccess = {
    _count: TypeAccessCountAggregateOutputType | null
    _avg: TypeAccessAvgAggregateOutputType | null
    _sum: TypeAccessSumAggregateOutputType | null
    _min: TypeAccessMinAggregateOutputType | null
    _max: TypeAccessMaxAggregateOutputType | null
  }

  export type TypeAccessAvgAggregateOutputType = {
    id: number | null
  }

  export type TypeAccessSumAggregateOutputType = {
    id: number | null
  }

  export type TypeAccessMinAggregateOutputType = {
    id: number | null
    description: string | null
    role: RoleUser | null
  }

  export type TypeAccessMaxAggregateOutputType = {
    id: number | null
    description: string | null
    role: RoleUser | null
  }

  export type TypeAccessCountAggregateOutputType = {
    id: number
    description: number
    role: number
    _all: number
  }


  export type TypeAccessAvgAggregateInputType = {
    id?: true
  }

  export type TypeAccessSumAggregateInputType = {
    id?: true
  }

  export type TypeAccessMinAggregateInputType = {
    id?: true
    description?: true
    role?: true
  }

  export type TypeAccessMaxAggregateInputType = {
    id?: true
    description?: true
    role?: true
  }

  export type TypeAccessCountAggregateInputType = {
    id?: true
    description?: true
    role?: true
    _all?: true
  }

  export type TypeAccessAggregateArgs = {
    /**
     * Filter which TypeAccess to aggregate.
     */
    where?: TypeAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeAccesses to fetch.
     */
    orderBy?: Enumerable<TypeAccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TypeAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TypeAccesses
    **/
    _count?: true | TypeAccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TypeAccessAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TypeAccessSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypeAccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypeAccessMaxAggregateInputType
  }

  export type GetTypeAccessAggregateType<T extends TypeAccessAggregateArgs> = {
        [P in keyof T & keyof AggregateTypeAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTypeAccess[P]>
      : GetScalarType<T[P], AggregateTypeAccess[P]>
  }




  export type TypeAccessGroupByArgs = {
    where?: TypeAccessWhereInput
    orderBy?: Enumerable<TypeAccessOrderByWithAggregationInput>
    by: TypeAccessScalarFieldEnum[]
    having?: TypeAccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypeAccessCountAggregateInputType | true
    _avg?: TypeAccessAvgAggregateInputType
    _sum?: TypeAccessSumAggregateInputType
    _min?: TypeAccessMinAggregateInputType
    _max?: TypeAccessMaxAggregateInputType
  }


  export type TypeAccessGroupByOutputType = {
    id: number
    description: string
    role: RoleUser
    _count: TypeAccessCountAggregateOutputType | null
    _avg: TypeAccessAvgAggregateOutputType | null
    _sum: TypeAccessSumAggregateOutputType | null
    _min: TypeAccessMinAggregateOutputType | null
    _max: TypeAccessMaxAggregateOutputType | null
  }

  type GetTypeAccessGroupByPayload<T extends TypeAccessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TypeAccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypeAccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypeAccessGroupByOutputType[P]>
            : GetScalarType<T[P], TypeAccessGroupByOutputType[P]>
        }
      >
    >


  export type TypeAccessSelect = {
    id?: boolean
    description?: boolean
    role?: boolean
    access?: boolean | TypeAccess$accessArgs
    _count?: boolean | TypeAccessCountOutputTypeArgs
  }


  export type TypeAccessInclude = {
    access?: boolean | TypeAccess$accessArgs
    _count?: boolean | TypeAccessCountOutputTypeArgs
  }

  export type TypeAccessGetPayload<S extends boolean | null | undefined | TypeAccessArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TypeAccess :
    S extends undefined ? never :
    S extends { include: any } & (TypeAccessArgs | TypeAccessFindManyArgs)
    ? TypeAccess  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'access' ? Array < AccessTypeAccessGetPayload<S['include'][P]>>  :
        P extends '_count' ? TypeAccessCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TypeAccessArgs | TypeAccessFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'access' ? Array < AccessTypeAccessGetPayload<S['select'][P]>>  :
        P extends '_count' ? TypeAccessCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TypeAccess ? TypeAccess[P] : never
  } 
      : TypeAccess


  type TypeAccessCountArgs = 
    Omit<TypeAccessFindManyArgs, 'select' | 'include'> & {
      select?: TypeAccessCountAggregateInputType | true
    }

  export interface TypeAccessDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TypeAccess that matches the filter.
     * @param {TypeAccessFindUniqueArgs} args - Arguments to find a TypeAccess
     * @example
     * // Get one TypeAccess
     * const typeAccess = await prisma.typeAccess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TypeAccessFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TypeAccessFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TypeAccess'> extends True ? Prisma__TypeAccessClient<TypeAccessGetPayload<T>> : Prisma__TypeAccessClient<TypeAccessGetPayload<T> | null, null>

    /**
     * Find one TypeAccess that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TypeAccessFindUniqueOrThrowArgs} args - Arguments to find a TypeAccess
     * @example
     * // Get one TypeAccess
     * const typeAccess = await prisma.typeAccess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TypeAccessFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TypeAccessFindUniqueOrThrowArgs>
    ): Prisma__TypeAccessClient<TypeAccessGetPayload<T>>

    /**
     * Find the first TypeAccess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeAccessFindFirstArgs} args - Arguments to find a TypeAccess
     * @example
     * // Get one TypeAccess
     * const typeAccess = await prisma.typeAccess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TypeAccessFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TypeAccessFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TypeAccess'> extends True ? Prisma__TypeAccessClient<TypeAccessGetPayload<T>> : Prisma__TypeAccessClient<TypeAccessGetPayload<T> | null, null>

    /**
     * Find the first TypeAccess that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeAccessFindFirstOrThrowArgs} args - Arguments to find a TypeAccess
     * @example
     * // Get one TypeAccess
     * const typeAccess = await prisma.typeAccess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TypeAccessFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TypeAccessFindFirstOrThrowArgs>
    ): Prisma__TypeAccessClient<TypeAccessGetPayload<T>>

    /**
     * Find zero or more TypeAccesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeAccessFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TypeAccesses
     * const typeAccesses = await prisma.typeAccess.findMany()
     * 
     * // Get first 10 TypeAccesses
     * const typeAccesses = await prisma.typeAccess.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const typeAccessWithIdOnly = await prisma.typeAccess.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TypeAccessFindManyArgs>(
      args?: SelectSubset<T, TypeAccessFindManyArgs>
    ): Prisma.PrismaPromise<Array<TypeAccessGetPayload<T>>>

    /**
     * Create a TypeAccess.
     * @param {TypeAccessCreateArgs} args - Arguments to create a TypeAccess.
     * @example
     * // Create one TypeAccess
     * const TypeAccess = await prisma.typeAccess.create({
     *   data: {
     *     // ... data to create a TypeAccess
     *   }
     * })
     * 
    **/
    create<T extends TypeAccessCreateArgs>(
      args: SelectSubset<T, TypeAccessCreateArgs>
    ): Prisma__TypeAccessClient<TypeAccessGetPayload<T>>

    /**
     * Create many TypeAccesses.
     *     @param {TypeAccessCreateManyArgs} args - Arguments to create many TypeAccesses.
     *     @example
     *     // Create many TypeAccesses
     *     const typeAccess = await prisma.typeAccess.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TypeAccessCreateManyArgs>(
      args?: SelectSubset<T, TypeAccessCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TypeAccess.
     * @param {TypeAccessDeleteArgs} args - Arguments to delete one TypeAccess.
     * @example
     * // Delete one TypeAccess
     * const TypeAccess = await prisma.typeAccess.delete({
     *   where: {
     *     // ... filter to delete one TypeAccess
     *   }
     * })
     * 
    **/
    delete<T extends TypeAccessDeleteArgs>(
      args: SelectSubset<T, TypeAccessDeleteArgs>
    ): Prisma__TypeAccessClient<TypeAccessGetPayload<T>>

    /**
     * Update one TypeAccess.
     * @param {TypeAccessUpdateArgs} args - Arguments to update one TypeAccess.
     * @example
     * // Update one TypeAccess
     * const typeAccess = await prisma.typeAccess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TypeAccessUpdateArgs>(
      args: SelectSubset<T, TypeAccessUpdateArgs>
    ): Prisma__TypeAccessClient<TypeAccessGetPayload<T>>

    /**
     * Delete zero or more TypeAccesses.
     * @param {TypeAccessDeleteManyArgs} args - Arguments to filter TypeAccesses to delete.
     * @example
     * // Delete a few TypeAccesses
     * const { count } = await prisma.typeAccess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TypeAccessDeleteManyArgs>(
      args?: SelectSubset<T, TypeAccessDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TypeAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeAccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TypeAccesses
     * const typeAccess = await prisma.typeAccess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TypeAccessUpdateManyArgs>(
      args: SelectSubset<T, TypeAccessUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TypeAccess.
     * @param {TypeAccessUpsertArgs} args - Arguments to update or create a TypeAccess.
     * @example
     * // Update or create a TypeAccess
     * const typeAccess = await prisma.typeAccess.upsert({
     *   create: {
     *     // ... data to create a TypeAccess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TypeAccess we want to update
     *   }
     * })
    **/
    upsert<T extends TypeAccessUpsertArgs>(
      args: SelectSubset<T, TypeAccessUpsertArgs>
    ): Prisma__TypeAccessClient<TypeAccessGetPayload<T>>

    /**
     * Count the number of TypeAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeAccessCountArgs} args - Arguments to filter TypeAccesses to count.
     * @example
     * // Count the number of TypeAccesses
     * const count = await prisma.typeAccess.count({
     *   where: {
     *     // ... the filter for the TypeAccesses we want to count
     *   }
     * })
    **/
    count<T extends TypeAccessCountArgs>(
      args?: Subset<T, TypeAccessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypeAccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TypeAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypeAccessAggregateArgs>(args: Subset<T, TypeAccessAggregateArgs>): Prisma.PrismaPromise<GetTypeAccessAggregateType<T>>

    /**
     * Group by TypeAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeAccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TypeAccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TypeAccessGroupByArgs['orderBy'] }
        : { orderBy?: TypeAccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TypeAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypeAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TypeAccess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TypeAccessClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    access<T extends TypeAccess$accessArgs= {}>(args?: Subset<T, TypeAccess$accessArgs>): Prisma.PrismaPromise<Array<AccessTypeAccessGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TypeAccess base type for findUnique actions
   */
  export type TypeAccessFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TypeAccess
     */
    select?: TypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeAccessInclude | null
    /**
     * Filter, which TypeAccess to fetch.
     */
    where: TypeAccessWhereUniqueInput
  }

  /**
   * TypeAccess findUnique
   */
  export interface TypeAccessFindUniqueArgs extends TypeAccessFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TypeAccess findUniqueOrThrow
   */
  export type TypeAccessFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TypeAccess
     */
    select?: TypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeAccessInclude | null
    /**
     * Filter, which TypeAccess to fetch.
     */
    where: TypeAccessWhereUniqueInput
  }


  /**
   * TypeAccess base type for findFirst actions
   */
  export type TypeAccessFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TypeAccess
     */
    select?: TypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeAccessInclude | null
    /**
     * Filter, which TypeAccess to fetch.
     */
    where?: TypeAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeAccesses to fetch.
     */
    orderBy?: Enumerable<TypeAccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TypeAccesses.
     */
    cursor?: TypeAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TypeAccesses.
     */
    distinct?: Enumerable<TypeAccessScalarFieldEnum>
  }

  /**
   * TypeAccess findFirst
   */
  export interface TypeAccessFindFirstArgs extends TypeAccessFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TypeAccess findFirstOrThrow
   */
  export type TypeAccessFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TypeAccess
     */
    select?: TypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeAccessInclude | null
    /**
     * Filter, which TypeAccess to fetch.
     */
    where?: TypeAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeAccesses to fetch.
     */
    orderBy?: Enumerable<TypeAccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TypeAccesses.
     */
    cursor?: TypeAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TypeAccesses.
     */
    distinct?: Enumerable<TypeAccessScalarFieldEnum>
  }


  /**
   * TypeAccess findMany
   */
  export type TypeAccessFindManyArgs = {
    /**
     * Select specific fields to fetch from the TypeAccess
     */
    select?: TypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeAccessInclude | null
    /**
     * Filter, which TypeAccesses to fetch.
     */
    where?: TypeAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeAccesses to fetch.
     */
    orderBy?: Enumerable<TypeAccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TypeAccesses.
     */
    cursor?: TypeAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeAccesses.
     */
    skip?: number
    distinct?: Enumerable<TypeAccessScalarFieldEnum>
  }


  /**
   * TypeAccess create
   */
  export type TypeAccessCreateArgs = {
    /**
     * Select specific fields to fetch from the TypeAccess
     */
    select?: TypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeAccessInclude | null
    /**
     * The data needed to create a TypeAccess.
     */
    data: XOR<TypeAccessCreateInput, TypeAccessUncheckedCreateInput>
  }


  /**
   * TypeAccess createMany
   */
  export type TypeAccessCreateManyArgs = {
    /**
     * The data used to create many TypeAccesses.
     */
    data: Enumerable<TypeAccessCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TypeAccess update
   */
  export type TypeAccessUpdateArgs = {
    /**
     * Select specific fields to fetch from the TypeAccess
     */
    select?: TypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeAccessInclude | null
    /**
     * The data needed to update a TypeAccess.
     */
    data: XOR<TypeAccessUpdateInput, TypeAccessUncheckedUpdateInput>
    /**
     * Choose, which TypeAccess to update.
     */
    where: TypeAccessWhereUniqueInput
  }


  /**
   * TypeAccess updateMany
   */
  export type TypeAccessUpdateManyArgs = {
    /**
     * The data used to update TypeAccesses.
     */
    data: XOR<TypeAccessUpdateManyMutationInput, TypeAccessUncheckedUpdateManyInput>
    /**
     * Filter which TypeAccesses to update
     */
    where?: TypeAccessWhereInput
  }


  /**
   * TypeAccess upsert
   */
  export type TypeAccessUpsertArgs = {
    /**
     * Select specific fields to fetch from the TypeAccess
     */
    select?: TypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeAccessInclude | null
    /**
     * The filter to search for the TypeAccess to update in case it exists.
     */
    where: TypeAccessWhereUniqueInput
    /**
     * In case the TypeAccess found by the `where` argument doesn't exist, create a new TypeAccess with this data.
     */
    create: XOR<TypeAccessCreateInput, TypeAccessUncheckedCreateInput>
    /**
     * In case the TypeAccess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TypeAccessUpdateInput, TypeAccessUncheckedUpdateInput>
  }


  /**
   * TypeAccess delete
   */
  export type TypeAccessDeleteArgs = {
    /**
     * Select specific fields to fetch from the TypeAccess
     */
    select?: TypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeAccessInclude | null
    /**
     * Filter which TypeAccess to delete.
     */
    where: TypeAccessWhereUniqueInput
  }


  /**
   * TypeAccess deleteMany
   */
  export type TypeAccessDeleteManyArgs = {
    /**
     * Filter which TypeAccesses to delete
     */
    where?: TypeAccessWhereInput
  }


  /**
   * TypeAccess.access
   */
  export type TypeAccess$accessArgs = {
    /**
     * Select specific fields to fetch from the AccessTypeAccess
     */
    select?: AccessTypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccessTypeAccessInclude | null
    where?: AccessTypeAccessWhereInput
    orderBy?: Enumerable<AccessTypeAccessOrderByWithRelationInput>
    cursor?: AccessTypeAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AccessTypeAccessScalarFieldEnum>
  }


  /**
   * TypeAccess without action
   */
  export type TypeAccessArgs = {
    /**
     * Select specific fields to fetch from the TypeAccess
     */
    select?: TypeAccessSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeAccessInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AccessScalarFieldEnum: {
    id: 'id',
    type: 'type',
    server: 'server',
    access: 'access',
    desc: 'desc'
  };

  export type AccessScalarFieldEnum = (typeof AccessScalarFieldEnum)[keyof typeof AccessScalarFieldEnum]


  export const AccessTypeAccessScalarFieldEnum: {
    id: 'id',
    accessId: 'accessId',
    typeAccessId: 'typeAccessId',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type AccessTypeAccessScalarFieldEnum = (typeof AccessTypeAccessScalarFieldEnum)[keyof typeof AccessTypeAccessScalarFieldEnum]


  export const ClientAccessScalarFieldEnum: {
    accessId: 'accessId',
    clientId: 'clientId',
    created_at: 'created_at',
    updated_at: 'updated_at',
    id: 'id'
  };

  export type ClientAccessScalarFieldEnum = (typeof ClientAccessScalarFieldEnum)[keyof typeof ClientAccessScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cnpj: 'cnpj',
    email: 'email'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const ClientUserScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    clientId: 'clientId',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ClientUserScalarFieldEnum = (typeof ClientUserScalarFieldEnum)[keyof typeof ClientUserScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cnpj: 'cnpj',
    email: 'email',
    role: 'role'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TypeAccessScalarFieldEnum: {
    id: 'id',
    description: 'description',
    role: 'role'
  };

  export type TypeAccessScalarFieldEnum = (typeof TypeAccessScalarFieldEnum)[keyof typeof TypeAccessScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    name?: StringNullableFilter | string | null
    role?: EnumRoleUserFilter | RoleUser
    clients?: ClientUserListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    clients?: ClientUserOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    role?: EnumRoleUserWithAggregatesFilter | RoleUser
  }

  export type ClientWhereInput = {
    AND?: Enumerable<ClientWhereInput>
    OR?: Enumerable<ClientWhereInput>
    NOT?: Enumerable<ClientWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    cnpj?: StringFilter | string
    email?: StringNullableFilter | string | null
    access?: ClientAccessListRelationFilter
    users?: ClientUserListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
    access?: ClientAccessOrderByRelationAggregateInput
    users?: ClientUserOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = {
    id?: number
  }

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
    _count?: ClientCountOrderByAggregateInput
    _avg?: ClientAvgOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
    _sum?: ClientSumOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClientScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClientScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClientScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    cnpj?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
  }

  export type ClientUserWhereInput = {
    AND?: Enumerable<ClientUserWhereInput>
    OR?: Enumerable<ClientUserWhereInput>
    NOT?: Enumerable<ClientUserWhereInput>
    id?: StringFilter | string
    userId?: IntFilter | number
    clientId?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    Client?: XOR<ClientRelationFilter, ClientWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ClientUserOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    clientId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    Client?: ClientOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ClientUserWhereUniqueInput = {
    id?: string
  }

  export type ClientUserOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    clientId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ClientUserCountOrderByAggregateInput
    _avg?: ClientUserAvgOrderByAggregateInput
    _max?: ClientUserMaxOrderByAggregateInput
    _min?: ClientUserMinOrderByAggregateInput
    _sum?: ClientUserSumOrderByAggregateInput
  }

  export type ClientUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClientUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClientUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClientUserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    clientId?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ClientAccessWhereInput = {
    AND?: Enumerable<ClientAccessWhereInput>
    OR?: Enumerable<ClientAccessWhereInput>
    NOT?: Enumerable<ClientAccessWhereInput>
    accessId?: IntFilter | number
    clientId?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    id?: StringFilter | string
    access?: XOR<AccessRelationFilter, AccessWhereInput>
    Client?: XOR<ClientRelationFilter, ClientWhereInput>
  }

  export type ClientAccessOrderByWithRelationInput = {
    accessId?: SortOrder
    clientId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    id?: SortOrder
    access?: AccessOrderByWithRelationInput
    Client?: ClientOrderByWithRelationInput
  }

  export type ClientAccessWhereUniqueInput = {
    id?: string
  }

  export type ClientAccessOrderByWithAggregationInput = {
    accessId?: SortOrder
    clientId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    id?: SortOrder
    _count?: ClientAccessCountOrderByAggregateInput
    _avg?: ClientAccessAvgOrderByAggregateInput
    _max?: ClientAccessMaxOrderByAggregateInput
    _min?: ClientAccessMinOrderByAggregateInput
    _sum?: ClientAccessSumOrderByAggregateInput
  }

  export type ClientAccessScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClientAccessScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClientAccessScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClientAccessScalarWhereWithAggregatesInput>
    accessId?: IntWithAggregatesFilter | number
    clientId?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    id?: StringWithAggregatesFilter | string
  }

  export type CompanyWhereInput = {
    AND?: Enumerable<CompanyWhereInput>
    OR?: Enumerable<CompanyWhereInput>
    NOT?: Enumerable<CompanyWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    cnpj?: StringFilter | string
    email?: StringFilter | string
    role?: EnumRoleUserFilter | RoleUser
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
    role?: SortOrder
  }

  export type CompanyWhereUniqueInput = {
    id?: number
  }

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
    role?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompanyScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompanyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompanyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    cnpj?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    role?: EnumRoleUserWithAggregatesFilter | RoleUser
  }

  export type AccessWhereInput = {
    AND?: Enumerable<AccessWhereInput>
    OR?: Enumerable<AccessWhereInput>
    NOT?: Enumerable<AccessWhereInput>
    id?: IntFilter | number
    type?: IntFilter | number
    server?: BoolFilter | boolean
    access?: StringFilter | string
    desc?: StringFilter | string
    typeAccess?: AccessTypeAccessListRelationFilter
    clients?: ClientAccessListRelationFilter
  }

  export type AccessOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    server?: SortOrder
    access?: SortOrder
    desc?: SortOrder
    typeAccess?: AccessTypeAccessOrderByRelationAggregateInput
    clients?: ClientAccessOrderByRelationAggregateInput
  }

  export type AccessWhereUniqueInput = {
    id?: number
  }

  export type AccessOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    server?: SortOrder
    access?: SortOrder
    desc?: SortOrder
    _count?: AccessCountOrderByAggregateInput
    _avg?: AccessAvgOrderByAggregateInput
    _max?: AccessMaxOrderByAggregateInput
    _min?: AccessMinOrderByAggregateInput
    _sum?: AccessSumOrderByAggregateInput
  }

  export type AccessScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccessScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccessScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccessScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    type?: IntWithAggregatesFilter | number
    server?: BoolWithAggregatesFilter | boolean
    access?: StringWithAggregatesFilter | string
    desc?: StringWithAggregatesFilter | string
  }

  export type AccessTypeAccessWhereInput = {
    AND?: Enumerable<AccessTypeAccessWhereInput>
    OR?: Enumerable<AccessTypeAccessWhereInput>
    NOT?: Enumerable<AccessTypeAccessWhereInput>
    id?: StringFilter | string
    accessId?: IntFilter | number
    typeAccessId?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    access?: XOR<AccessRelationFilter, AccessWhereInput>
    typeAccess?: XOR<TypeAccessRelationFilter, TypeAccessWhereInput>
  }

  export type AccessTypeAccessOrderByWithRelationInput = {
    id?: SortOrder
    accessId?: SortOrder
    typeAccessId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    access?: AccessOrderByWithRelationInput
    typeAccess?: TypeAccessOrderByWithRelationInput
  }

  export type AccessTypeAccessWhereUniqueInput = {
    id?: string
  }

  export type AccessTypeAccessOrderByWithAggregationInput = {
    id?: SortOrder
    accessId?: SortOrder
    typeAccessId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: AccessTypeAccessCountOrderByAggregateInput
    _avg?: AccessTypeAccessAvgOrderByAggregateInput
    _max?: AccessTypeAccessMaxOrderByAggregateInput
    _min?: AccessTypeAccessMinOrderByAggregateInput
    _sum?: AccessTypeAccessSumOrderByAggregateInput
  }

  export type AccessTypeAccessScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccessTypeAccessScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccessTypeAccessScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccessTypeAccessScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    accessId?: IntWithAggregatesFilter | number
    typeAccessId?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TypeAccessWhereInput = {
    AND?: Enumerable<TypeAccessWhereInput>
    OR?: Enumerable<TypeAccessWhereInput>
    NOT?: Enumerable<TypeAccessWhereInput>
    id?: IntFilter | number
    description?: StringFilter | string
    role?: EnumRoleUserFilter | RoleUser
    access?: AccessTypeAccessListRelationFilter
  }

  export type TypeAccessOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    role?: SortOrder
    access?: AccessTypeAccessOrderByRelationAggregateInput
  }

  export type TypeAccessWhereUniqueInput = {
    id?: number
  }

  export type TypeAccessOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    role?: SortOrder
    _count?: TypeAccessCountOrderByAggregateInput
    _avg?: TypeAccessAvgOrderByAggregateInput
    _max?: TypeAccessMaxOrderByAggregateInput
    _min?: TypeAccessMinOrderByAggregateInput
    _sum?: TypeAccessSumOrderByAggregateInput
  }

  export type TypeAccessScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TypeAccessScalarWhereWithAggregatesInput>
    OR?: Enumerable<TypeAccessScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TypeAccessScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
    role?: EnumRoleUserWithAggregatesFilter | RoleUser
  }

  export type UserCreateInput = {
    email: string
    password: string
    name?: string | null
    role: RoleUser
    clients?: ClientUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    role: RoleUser
    clients?: ClientUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
    clients?: ClientUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
    clients?: ClientUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    role: RoleUser
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
  }

  export type ClientCreateInput = {
    name: string
    cnpj: string
    email?: string | null
    access?: ClientAccessCreateNestedManyWithoutClientInput
    users?: ClientUserCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: number
    name: string
    cnpj: string
    email?: string | null
    access?: ClientAccessUncheckedCreateNestedManyWithoutClientInput
    users?: ClientUserUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    access?: ClientAccessUpdateManyWithoutClientNestedInput
    users?: ClientUserUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    access?: ClientAccessUncheckedUpdateManyWithoutClientNestedInput
    users?: ClientUserUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    id?: number
    name: string
    cnpj: string
    email?: string | null
  }

  export type ClientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClientUserCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    Client: ClientCreateNestedOneWithoutUsersInput
    user: UserCreateNestedOneWithoutClientsInput
  }

  export type ClientUserUncheckedCreateInput = {
    id?: string
    userId: number
    clientId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ClientUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Client?: ClientUpdateOneRequiredWithoutUsersNestedInput
    user?: UserUpdateOneRequiredWithoutClientsNestedInput
  }

  export type ClientUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUserCreateManyInput = {
    id?: string
    userId: number
    clientId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ClientUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientAccessCreateInput = {
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
    access: AccessCreateNestedOneWithoutClientsInput
    Client: ClientCreateNestedOneWithoutAccessInput
  }

  export type ClientAccessUncheckedCreateInput = {
    accessId: number
    clientId: number
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
  }

  export type ClientAccessUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    access?: AccessUpdateOneRequiredWithoutClientsNestedInput
    Client?: ClientUpdateOneRequiredWithoutAccessNestedInput
  }

  export type ClientAccessUncheckedUpdateInput = {
    accessId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ClientAccessCreateManyInput = {
    accessId: number
    clientId: number
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
  }

  export type ClientAccessUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ClientAccessUncheckedUpdateManyInput = {
    accessId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyCreateInput = {
    name: string
    cnpj: string
    email: string
    role: RoleUser
  }

  export type CompanyUncheckedCreateInput = {
    id?: number
    name: string
    cnpj: string
    email: string
    role: RoleUser
  }

  export type CompanyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
  }

  export type CompanyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
  }

  export type CompanyCreateManyInput = {
    id?: number
    name: string
    cnpj: string
    email: string
    role: RoleUser
  }

  export type CompanyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
  }

  export type AccessCreateInput = {
    type: number
    server: boolean
    access: string
    desc: string
    typeAccess?: AccessTypeAccessCreateNestedManyWithoutAccessInput
    clients?: ClientAccessCreateNestedManyWithoutAccessInput
  }

  export type AccessUncheckedCreateInput = {
    id?: number
    type: number
    server: boolean
    access: string
    desc: string
    typeAccess?: AccessTypeAccessUncheckedCreateNestedManyWithoutAccessInput
    clients?: ClientAccessUncheckedCreateNestedManyWithoutAccessInput
  }

  export type AccessUpdateInput = {
    type?: IntFieldUpdateOperationsInput | number
    server?: BoolFieldUpdateOperationsInput | boolean
    access?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    typeAccess?: AccessTypeAccessUpdateManyWithoutAccessNestedInput
    clients?: ClientAccessUpdateManyWithoutAccessNestedInput
  }

  export type AccessUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    server?: BoolFieldUpdateOperationsInput | boolean
    access?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    typeAccess?: AccessTypeAccessUncheckedUpdateManyWithoutAccessNestedInput
    clients?: ClientAccessUncheckedUpdateManyWithoutAccessNestedInput
  }

  export type AccessCreateManyInput = {
    id?: number
    type: number
    server: boolean
    access: string
    desc: string
  }

  export type AccessUpdateManyMutationInput = {
    type?: IntFieldUpdateOperationsInput | number
    server?: BoolFieldUpdateOperationsInput | boolean
    access?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
  }

  export type AccessUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    server?: BoolFieldUpdateOperationsInput | boolean
    access?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
  }

  export type AccessTypeAccessCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    access: AccessCreateNestedOneWithoutTypeAccessInput
    typeAccess: TypeAccessCreateNestedOneWithoutAccessInput
  }

  export type AccessTypeAccessUncheckedCreateInput = {
    id?: string
    accessId: number
    typeAccessId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AccessTypeAccessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    access?: AccessUpdateOneRequiredWithoutTypeAccessNestedInput
    typeAccess?: TypeAccessUpdateOneRequiredWithoutAccessNestedInput
  }

  export type AccessTypeAccessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessId?: IntFieldUpdateOperationsInput | number
    typeAccessId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccessTypeAccessCreateManyInput = {
    id?: string
    accessId: number
    typeAccessId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AccessTypeAccessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccessTypeAccessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessId?: IntFieldUpdateOperationsInput | number
    typeAccessId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TypeAccessCreateInput = {
    description: string
    role: RoleUser
    access?: AccessTypeAccessCreateNestedManyWithoutTypeAccessInput
  }

  export type TypeAccessUncheckedCreateInput = {
    id?: number
    description: string
    role: RoleUser
    access?: AccessTypeAccessUncheckedCreateNestedManyWithoutTypeAccessInput
  }

  export type TypeAccessUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
    access?: AccessTypeAccessUpdateManyWithoutTypeAccessNestedInput
  }

  export type TypeAccessUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
    access?: AccessTypeAccessUncheckedUpdateManyWithoutTypeAccessNestedInput
  }

  export type TypeAccessCreateManyInput = {
    id?: number
    description: string
    role: RoleUser
  }

  export type TypeAccessUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
  }

  export type TypeAccessUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumRoleUserFilter = {
    equals?: RoleUser
    in?: Enumerable<RoleUser>
    notIn?: Enumerable<RoleUser>
    not?: NestedEnumRoleUserFilter | RoleUser
  }

  export type ClientUserListRelationFilter = {
    every?: ClientUserWhereInput
    some?: ClientUserWhereInput
    none?: ClientUserWhereInput
  }

  export type ClientUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumRoleUserWithAggregatesFilter = {
    equals?: RoleUser
    in?: Enumerable<RoleUser>
    notIn?: Enumerable<RoleUser>
    not?: NestedEnumRoleUserWithAggregatesFilter | RoleUser
    _count?: NestedIntFilter
    _min?: NestedEnumRoleUserFilter
    _max?: NestedEnumRoleUserFilter
  }

  export type ClientAccessListRelationFilter = {
    every?: ClientAccessWhereInput
    some?: ClientAccessWhereInput
    none?: ClientAccessWhereInput
  }

  export type ClientAccessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
  }

  export type ClientAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
  }

  export type ClientSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ClientRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ClientUserCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clientId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClientUserAvgOrderByAggregateInput = {
    userId?: SortOrder
    clientId?: SortOrder
  }

  export type ClientUserMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clientId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClientUserMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clientId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClientUserSumOrderByAggregateInput = {
    userId?: SortOrder
    clientId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type AccessRelationFilter = {
    is?: AccessWhereInput
    isNot?: AccessWhereInput
  }

  export type ClientAccessCountOrderByAggregateInput = {
    accessId?: SortOrder
    clientId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    id?: SortOrder
  }

  export type ClientAccessAvgOrderByAggregateInput = {
    accessId?: SortOrder
    clientId?: SortOrder
  }

  export type ClientAccessMaxOrderByAggregateInput = {
    accessId?: SortOrder
    clientId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    id?: SortOrder
  }

  export type ClientAccessMinOrderByAggregateInput = {
    accessId?: SortOrder
    clientId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    id?: SortOrder
  }

  export type ClientAccessSumOrderByAggregateInput = {
    accessId?: SortOrder
    clientId?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
    role?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
    role?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cnpj?: SortOrder
    email?: SortOrder
    role?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type AccessTypeAccessListRelationFilter = {
    every?: AccessTypeAccessWhereInput
    some?: AccessTypeAccessWhereInput
    none?: AccessTypeAccessWhereInput
  }

  export type AccessTypeAccessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccessCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    server?: SortOrder
    access?: SortOrder
    desc?: SortOrder
  }

  export type AccessAvgOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type AccessMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    server?: SortOrder
    access?: SortOrder
    desc?: SortOrder
  }

  export type AccessMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    server?: SortOrder
    access?: SortOrder
    desc?: SortOrder
  }

  export type AccessSumOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type TypeAccessRelationFilter = {
    is?: TypeAccessWhereInput
    isNot?: TypeAccessWhereInput
  }

  export type AccessTypeAccessCountOrderByAggregateInput = {
    id?: SortOrder
    accessId?: SortOrder
    typeAccessId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AccessTypeAccessAvgOrderByAggregateInput = {
    accessId?: SortOrder
    typeAccessId?: SortOrder
  }

  export type AccessTypeAccessMaxOrderByAggregateInput = {
    id?: SortOrder
    accessId?: SortOrder
    typeAccessId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AccessTypeAccessMinOrderByAggregateInput = {
    id?: SortOrder
    accessId?: SortOrder
    typeAccessId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AccessTypeAccessSumOrderByAggregateInput = {
    accessId?: SortOrder
    typeAccessId?: SortOrder
  }

  export type TypeAccessCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    role?: SortOrder
  }

  export type TypeAccessAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TypeAccessMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    role?: SortOrder
  }

  export type TypeAccessMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    role?: SortOrder
  }

  export type TypeAccessSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClientUserCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ClientUserCreateWithoutUserInput>, Enumerable<ClientUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ClientUserCreateOrConnectWithoutUserInput>
    createMany?: ClientUserCreateManyUserInputEnvelope
    connect?: Enumerable<ClientUserWhereUniqueInput>
  }

  export type ClientUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ClientUserCreateWithoutUserInput>, Enumerable<ClientUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ClientUserCreateOrConnectWithoutUserInput>
    createMany?: ClientUserCreateManyUserInputEnvelope
    connect?: Enumerable<ClientUserWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleUserFieldUpdateOperationsInput = {
    set?: RoleUser
  }

  export type ClientUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ClientUserCreateWithoutUserInput>, Enumerable<ClientUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ClientUserCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ClientUserUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ClientUserCreateManyUserInputEnvelope
    set?: Enumerable<ClientUserWhereUniqueInput>
    disconnect?: Enumerable<ClientUserWhereUniqueInput>
    delete?: Enumerable<ClientUserWhereUniqueInput>
    connect?: Enumerable<ClientUserWhereUniqueInput>
    update?: Enumerable<ClientUserUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ClientUserUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ClientUserScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClientUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ClientUserCreateWithoutUserInput>, Enumerable<ClientUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ClientUserCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ClientUserUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ClientUserCreateManyUserInputEnvelope
    set?: Enumerable<ClientUserWhereUniqueInput>
    disconnect?: Enumerable<ClientUserWhereUniqueInput>
    delete?: Enumerable<ClientUserWhereUniqueInput>
    connect?: Enumerable<ClientUserWhereUniqueInput>
    update?: Enumerable<ClientUserUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ClientUserUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ClientUserScalarWhereInput>
  }

  export type ClientAccessCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<ClientAccessCreateWithoutClientInput>, Enumerable<ClientAccessUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ClientAccessCreateOrConnectWithoutClientInput>
    createMany?: ClientAccessCreateManyClientInputEnvelope
    connect?: Enumerable<ClientAccessWhereUniqueInput>
  }

  export type ClientUserCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<ClientUserCreateWithoutClientInput>, Enumerable<ClientUserUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ClientUserCreateOrConnectWithoutClientInput>
    createMany?: ClientUserCreateManyClientInputEnvelope
    connect?: Enumerable<ClientUserWhereUniqueInput>
  }

  export type ClientAccessUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<ClientAccessCreateWithoutClientInput>, Enumerable<ClientAccessUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ClientAccessCreateOrConnectWithoutClientInput>
    createMany?: ClientAccessCreateManyClientInputEnvelope
    connect?: Enumerable<ClientAccessWhereUniqueInput>
  }

  export type ClientUserUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<ClientUserCreateWithoutClientInput>, Enumerable<ClientUserUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ClientUserCreateOrConnectWithoutClientInput>
    createMany?: ClientUserCreateManyClientInputEnvelope
    connect?: Enumerable<ClientUserWhereUniqueInput>
  }

  export type ClientAccessUpdateManyWithoutClientNestedInput = {
    create?: XOR<Enumerable<ClientAccessCreateWithoutClientInput>, Enumerable<ClientAccessUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ClientAccessCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<ClientAccessUpsertWithWhereUniqueWithoutClientInput>
    createMany?: ClientAccessCreateManyClientInputEnvelope
    set?: Enumerable<ClientAccessWhereUniqueInput>
    disconnect?: Enumerable<ClientAccessWhereUniqueInput>
    delete?: Enumerable<ClientAccessWhereUniqueInput>
    connect?: Enumerable<ClientAccessWhereUniqueInput>
    update?: Enumerable<ClientAccessUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<ClientAccessUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<ClientAccessScalarWhereInput>
  }

  export type ClientUserUpdateManyWithoutClientNestedInput = {
    create?: XOR<Enumerable<ClientUserCreateWithoutClientInput>, Enumerable<ClientUserUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ClientUserCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<ClientUserUpsertWithWhereUniqueWithoutClientInput>
    createMany?: ClientUserCreateManyClientInputEnvelope
    set?: Enumerable<ClientUserWhereUniqueInput>
    disconnect?: Enumerable<ClientUserWhereUniqueInput>
    delete?: Enumerable<ClientUserWhereUniqueInput>
    connect?: Enumerable<ClientUserWhereUniqueInput>
    update?: Enumerable<ClientUserUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<ClientUserUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<ClientUserScalarWhereInput>
  }

  export type ClientAccessUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<Enumerable<ClientAccessCreateWithoutClientInput>, Enumerable<ClientAccessUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ClientAccessCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<ClientAccessUpsertWithWhereUniqueWithoutClientInput>
    createMany?: ClientAccessCreateManyClientInputEnvelope
    set?: Enumerable<ClientAccessWhereUniqueInput>
    disconnect?: Enumerable<ClientAccessWhereUniqueInput>
    delete?: Enumerable<ClientAccessWhereUniqueInput>
    connect?: Enumerable<ClientAccessWhereUniqueInput>
    update?: Enumerable<ClientAccessUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<ClientAccessUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<ClientAccessScalarWhereInput>
  }

  export type ClientUserUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<Enumerable<ClientUserCreateWithoutClientInput>, Enumerable<ClientUserUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<ClientUserCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<ClientUserUpsertWithWhereUniqueWithoutClientInput>
    createMany?: ClientUserCreateManyClientInputEnvelope
    set?: Enumerable<ClientUserWhereUniqueInput>
    disconnect?: Enumerable<ClientUserWhereUniqueInput>
    delete?: Enumerable<ClientUserWhereUniqueInput>
    connect?: Enumerable<ClientUserWhereUniqueInput>
    update?: Enumerable<ClientUserUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<ClientUserUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<ClientUserScalarWhereInput>
  }

  export type ClientCreateNestedOneWithoutUsersInput = {
    create?: XOR<ClientCreateWithoutUsersInput, ClientUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ClientCreateOrConnectWithoutUsersInput
    connect?: ClientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutClientsInput = {
    create?: XOR<UserCreateWithoutClientsInput, UserUncheckedCreateWithoutClientsInput>
    connectOrCreate?: UserCreateOrConnectWithoutClientsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ClientUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<ClientCreateWithoutUsersInput, ClientUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ClientCreateOrConnectWithoutUsersInput
    upsert?: ClientUpsertWithoutUsersInput
    connect?: ClientWhereUniqueInput
    update?: XOR<ClientUpdateWithoutUsersInput, ClientUncheckedUpdateWithoutUsersInput>
  }

  export type UserUpdateOneRequiredWithoutClientsNestedInput = {
    create?: XOR<UserCreateWithoutClientsInput, UserUncheckedCreateWithoutClientsInput>
    connectOrCreate?: UserCreateOrConnectWithoutClientsInput
    upsert?: UserUpsertWithoutClientsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutClientsInput, UserUncheckedUpdateWithoutClientsInput>
  }

  export type AccessCreateNestedOneWithoutClientsInput = {
    create?: XOR<AccessCreateWithoutClientsInput, AccessUncheckedCreateWithoutClientsInput>
    connectOrCreate?: AccessCreateOrConnectWithoutClientsInput
    connect?: AccessWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutAccessInput = {
    create?: XOR<ClientCreateWithoutAccessInput, ClientUncheckedCreateWithoutAccessInput>
    connectOrCreate?: ClientCreateOrConnectWithoutAccessInput
    connect?: ClientWhereUniqueInput
  }

  export type AccessUpdateOneRequiredWithoutClientsNestedInput = {
    create?: XOR<AccessCreateWithoutClientsInput, AccessUncheckedCreateWithoutClientsInput>
    connectOrCreate?: AccessCreateOrConnectWithoutClientsInput
    upsert?: AccessUpsertWithoutClientsInput
    connect?: AccessWhereUniqueInput
    update?: XOR<AccessUpdateWithoutClientsInput, AccessUncheckedUpdateWithoutClientsInput>
  }

  export type ClientUpdateOneRequiredWithoutAccessNestedInput = {
    create?: XOR<ClientCreateWithoutAccessInput, ClientUncheckedCreateWithoutAccessInput>
    connectOrCreate?: ClientCreateOrConnectWithoutAccessInput
    upsert?: ClientUpsertWithoutAccessInput
    connect?: ClientWhereUniqueInput
    update?: XOR<ClientUpdateWithoutAccessInput, ClientUncheckedUpdateWithoutAccessInput>
  }

  export type AccessTypeAccessCreateNestedManyWithoutAccessInput = {
    create?: XOR<Enumerable<AccessTypeAccessCreateWithoutAccessInput>, Enumerable<AccessTypeAccessUncheckedCreateWithoutAccessInput>>
    connectOrCreate?: Enumerable<AccessTypeAccessCreateOrConnectWithoutAccessInput>
    createMany?: AccessTypeAccessCreateManyAccessInputEnvelope
    connect?: Enumerable<AccessTypeAccessWhereUniqueInput>
  }

  export type ClientAccessCreateNestedManyWithoutAccessInput = {
    create?: XOR<Enumerable<ClientAccessCreateWithoutAccessInput>, Enumerable<ClientAccessUncheckedCreateWithoutAccessInput>>
    connectOrCreate?: Enumerable<ClientAccessCreateOrConnectWithoutAccessInput>
    createMany?: ClientAccessCreateManyAccessInputEnvelope
    connect?: Enumerable<ClientAccessWhereUniqueInput>
  }

  export type AccessTypeAccessUncheckedCreateNestedManyWithoutAccessInput = {
    create?: XOR<Enumerable<AccessTypeAccessCreateWithoutAccessInput>, Enumerable<AccessTypeAccessUncheckedCreateWithoutAccessInput>>
    connectOrCreate?: Enumerable<AccessTypeAccessCreateOrConnectWithoutAccessInput>
    createMany?: AccessTypeAccessCreateManyAccessInputEnvelope
    connect?: Enumerable<AccessTypeAccessWhereUniqueInput>
  }

  export type ClientAccessUncheckedCreateNestedManyWithoutAccessInput = {
    create?: XOR<Enumerable<ClientAccessCreateWithoutAccessInput>, Enumerable<ClientAccessUncheckedCreateWithoutAccessInput>>
    connectOrCreate?: Enumerable<ClientAccessCreateOrConnectWithoutAccessInput>
    createMany?: ClientAccessCreateManyAccessInputEnvelope
    connect?: Enumerable<ClientAccessWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AccessTypeAccessUpdateManyWithoutAccessNestedInput = {
    create?: XOR<Enumerable<AccessTypeAccessCreateWithoutAccessInput>, Enumerable<AccessTypeAccessUncheckedCreateWithoutAccessInput>>
    connectOrCreate?: Enumerable<AccessTypeAccessCreateOrConnectWithoutAccessInput>
    upsert?: Enumerable<AccessTypeAccessUpsertWithWhereUniqueWithoutAccessInput>
    createMany?: AccessTypeAccessCreateManyAccessInputEnvelope
    set?: Enumerable<AccessTypeAccessWhereUniqueInput>
    disconnect?: Enumerable<AccessTypeAccessWhereUniqueInput>
    delete?: Enumerable<AccessTypeAccessWhereUniqueInput>
    connect?: Enumerable<AccessTypeAccessWhereUniqueInput>
    update?: Enumerable<AccessTypeAccessUpdateWithWhereUniqueWithoutAccessInput>
    updateMany?: Enumerable<AccessTypeAccessUpdateManyWithWhereWithoutAccessInput>
    deleteMany?: Enumerable<AccessTypeAccessScalarWhereInput>
  }

  export type ClientAccessUpdateManyWithoutAccessNestedInput = {
    create?: XOR<Enumerable<ClientAccessCreateWithoutAccessInput>, Enumerable<ClientAccessUncheckedCreateWithoutAccessInput>>
    connectOrCreate?: Enumerable<ClientAccessCreateOrConnectWithoutAccessInput>
    upsert?: Enumerable<ClientAccessUpsertWithWhereUniqueWithoutAccessInput>
    createMany?: ClientAccessCreateManyAccessInputEnvelope
    set?: Enumerable<ClientAccessWhereUniqueInput>
    disconnect?: Enumerable<ClientAccessWhereUniqueInput>
    delete?: Enumerable<ClientAccessWhereUniqueInput>
    connect?: Enumerable<ClientAccessWhereUniqueInput>
    update?: Enumerable<ClientAccessUpdateWithWhereUniqueWithoutAccessInput>
    updateMany?: Enumerable<ClientAccessUpdateManyWithWhereWithoutAccessInput>
    deleteMany?: Enumerable<ClientAccessScalarWhereInput>
  }

  export type AccessTypeAccessUncheckedUpdateManyWithoutAccessNestedInput = {
    create?: XOR<Enumerable<AccessTypeAccessCreateWithoutAccessInput>, Enumerable<AccessTypeAccessUncheckedCreateWithoutAccessInput>>
    connectOrCreate?: Enumerable<AccessTypeAccessCreateOrConnectWithoutAccessInput>
    upsert?: Enumerable<AccessTypeAccessUpsertWithWhereUniqueWithoutAccessInput>
    createMany?: AccessTypeAccessCreateManyAccessInputEnvelope
    set?: Enumerable<AccessTypeAccessWhereUniqueInput>
    disconnect?: Enumerable<AccessTypeAccessWhereUniqueInput>
    delete?: Enumerable<AccessTypeAccessWhereUniqueInput>
    connect?: Enumerable<AccessTypeAccessWhereUniqueInput>
    update?: Enumerable<AccessTypeAccessUpdateWithWhereUniqueWithoutAccessInput>
    updateMany?: Enumerable<AccessTypeAccessUpdateManyWithWhereWithoutAccessInput>
    deleteMany?: Enumerable<AccessTypeAccessScalarWhereInput>
  }

  export type ClientAccessUncheckedUpdateManyWithoutAccessNestedInput = {
    create?: XOR<Enumerable<ClientAccessCreateWithoutAccessInput>, Enumerable<ClientAccessUncheckedCreateWithoutAccessInput>>
    connectOrCreate?: Enumerable<ClientAccessCreateOrConnectWithoutAccessInput>
    upsert?: Enumerable<ClientAccessUpsertWithWhereUniqueWithoutAccessInput>
    createMany?: ClientAccessCreateManyAccessInputEnvelope
    set?: Enumerable<ClientAccessWhereUniqueInput>
    disconnect?: Enumerable<ClientAccessWhereUniqueInput>
    delete?: Enumerable<ClientAccessWhereUniqueInput>
    connect?: Enumerable<ClientAccessWhereUniqueInput>
    update?: Enumerable<ClientAccessUpdateWithWhereUniqueWithoutAccessInput>
    updateMany?: Enumerable<ClientAccessUpdateManyWithWhereWithoutAccessInput>
    deleteMany?: Enumerable<ClientAccessScalarWhereInput>
  }

  export type AccessCreateNestedOneWithoutTypeAccessInput = {
    create?: XOR<AccessCreateWithoutTypeAccessInput, AccessUncheckedCreateWithoutTypeAccessInput>
    connectOrCreate?: AccessCreateOrConnectWithoutTypeAccessInput
    connect?: AccessWhereUniqueInput
  }

  export type TypeAccessCreateNestedOneWithoutAccessInput = {
    create?: XOR<TypeAccessCreateWithoutAccessInput, TypeAccessUncheckedCreateWithoutAccessInput>
    connectOrCreate?: TypeAccessCreateOrConnectWithoutAccessInput
    connect?: TypeAccessWhereUniqueInput
  }

  export type AccessUpdateOneRequiredWithoutTypeAccessNestedInput = {
    create?: XOR<AccessCreateWithoutTypeAccessInput, AccessUncheckedCreateWithoutTypeAccessInput>
    connectOrCreate?: AccessCreateOrConnectWithoutTypeAccessInput
    upsert?: AccessUpsertWithoutTypeAccessInput
    connect?: AccessWhereUniqueInput
    update?: XOR<AccessUpdateWithoutTypeAccessInput, AccessUncheckedUpdateWithoutTypeAccessInput>
  }

  export type TypeAccessUpdateOneRequiredWithoutAccessNestedInput = {
    create?: XOR<TypeAccessCreateWithoutAccessInput, TypeAccessUncheckedCreateWithoutAccessInput>
    connectOrCreate?: TypeAccessCreateOrConnectWithoutAccessInput
    upsert?: TypeAccessUpsertWithoutAccessInput
    connect?: TypeAccessWhereUniqueInput
    update?: XOR<TypeAccessUpdateWithoutAccessInput, TypeAccessUncheckedUpdateWithoutAccessInput>
  }

  export type AccessTypeAccessCreateNestedManyWithoutTypeAccessInput = {
    create?: XOR<Enumerable<AccessTypeAccessCreateWithoutTypeAccessInput>, Enumerable<AccessTypeAccessUncheckedCreateWithoutTypeAccessInput>>
    connectOrCreate?: Enumerable<AccessTypeAccessCreateOrConnectWithoutTypeAccessInput>
    createMany?: AccessTypeAccessCreateManyTypeAccessInputEnvelope
    connect?: Enumerable<AccessTypeAccessWhereUniqueInput>
  }

  export type AccessTypeAccessUncheckedCreateNestedManyWithoutTypeAccessInput = {
    create?: XOR<Enumerable<AccessTypeAccessCreateWithoutTypeAccessInput>, Enumerable<AccessTypeAccessUncheckedCreateWithoutTypeAccessInput>>
    connectOrCreate?: Enumerable<AccessTypeAccessCreateOrConnectWithoutTypeAccessInput>
    createMany?: AccessTypeAccessCreateManyTypeAccessInputEnvelope
    connect?: Enumerable<AccessTypeAccessWhereUniqueInput>
  }

  export type AccessTypeAccessUpdateManyWithoutTypeAccessNestedInput = {
    create?: XOR<Enumerable<AccessTypeAccessCreateWithoutTypeAccessInput>, Enumerable<AccessTypeAccessUncheckedCreateWithoutTypeAccessInput>>
    connectOrCreate?: Enumerable<AccessTypeAccessCreateOrConnectWithoutTypeAccessInput>
    upsert?: Enumerable<AccessTypeAccessUpsertWithWhereUniqueWithoutTypeAccessInput>
    createMany?: AccessTypeAccessCreateManyTypeAccessInputEnvelope
    set?: Enumerable<AccessTypeAccessWhereUniqueInput>
    disconnect?: Enumerable<AccessTypeAccessWhereUniqueInput>
    delete?: Enumerable<AccessTypeAccessWhereUniqueInput>
    connect?: Enumerable<AccessTypeAccessWhereUniqueInput>
    update?: Enumerable<AccessTypeAccessUpdateWithWhereUniqueWithoutTypeAccessInput>
    updateMany?: Enumerable<AccessTypeAccessUpdateManyWithWhereWithoutTypeAccessInput>
    deleteMany?: Enumerable<AccessTypeAccessScalarWhereInput>
  }

  export type AccessTypeAccessUncheckedUpdateManyWithoutTypeAccessNestedInput = {
    create?: XOR<Enumerable<AccessTypeAccessCreateWithoutTypeAccessInput>, Enumerable<AccessTypeAccessUncheckedCreateWithoutTypeAccessInput>>
    connectOrCreate?: Enumerable<AccessTypeAccessCreateOrConnectWithoutTypeAccessInput>
    upsert?: Enumerable<AccessTypeAccessUpsertWithWhereUniqueWithoutTypeAccessInput>
    createMany?: AccessTypeAccessCreateManyTypeAccessInputEnvelope
    set?: Enumerable<AccessTypeAccessWhereUniqueInput>
    disconnect?: Enumerable<AccessTypeAccessWhereUniqueInput>
    delete?: Enumerable<AccessTypeAccessWhereUniqueInput>
    connect?: Enumerable<AccessTypeAccessWhereUniqueInput>
    update?: Enumerable<AccessTypeAccessUpdateWithWhereUniqueWithoutTypeAccessInput>
    updateMany?: Enumerable<AccessTypeAccessUpdateManyWithWhereWithoutTypeAccessInput>
    deleteMany?: Enumerable<AccessTypeAccessScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumRoleUserFilter = {
    equals?: RoleUser
    in?: Enumerable<RoleUser>
    notIn?: Enumerable<RoleUser>
    not?: NestedEnumRoleUserFilter | RoleUser
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumRoleUserWithAggregatesFilter = {
    equals?: RoleUser
    in?: Enumerable<RoleUser>
    notIn?: Enumerable<RoleUser>
    not?: NestedEnumRoleUserWithAggregatesFilter | RoleUser
    _count?: NestedIntFilter
    _min?: NestedEnumRoleUserFilter
    _max?: NestedEnumRoleUserFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ClientUserCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    Client: ClientCreateNestedOneWithoutUsersInput
  }

  export type ClientUserUncheckedCreateWithoutUserInput = {
    id?: string
    clientId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ClientUserCreateOrConnectWithoutUserInput = {
    where: ClientUserWhereUniqueInput
    create: XOR<ClientUserCreateWithoutUserInput, ClientUserUncheckedCreateWithoutUserInput>
  }

  export type ClientUserCreateManyUserInputEnvelope = {
    data: Enumerable<ClientUserCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ClientUserUpsertWithWhereUniqueWithoutUserInput = {
    where: ClientUserWhereUniqueInput
    update: XOR<ClientUserUpdateWithoutUserInput, ClientUserUncheckedUpdateWithoutUserInput>
    create: XOR<ClientUserCreateWithoutUserInput, ClientUserUncheckedCreateWithoutUserInput>
  }

  export type ClientUserUpdateWithWhereUniqueWithoutUserInput = {
    where: ClientUserWhereUniqueInput
    data: XOR<ClientUserUpdateWithoutUserInput, ClientUserUncheckedUpdateWithoutUserInput>
  }

  export type ClientUserUpdateManyWithWhereWithoutUserInput = {
    where: ClientUserScalarWhereInput
    data: XOR<ClientUserUpdateManyMutationInput, ClientUserUncheckedUpdateManyWithoutClientsInput>
  }

  export type ClientUserScalarWhereInput = {
    AND?: Enumerable<ClientUserScalarWhereInput>
    OR?: Enumerable<ClientUserScalarWhereInput>
    NOT?: Enumerable<ClientUserScalarWhereInput>
    id?: StringFilter | string
    userId?: IntFilter | number
    clientId?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type ClientAccessCreateWithoutClientInput = {
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
    access: AccessCreateNestedOneWithoutClientsInput
  }

  export type ClientAccessUncheckedCreateWithoutClientInput = {
    accessId: number
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
  }

  export type ClientAccessCreateOrConnectWithoutClientInput = {
    where: ClientAccessWhereUniqueInput
    create: XOR<ClientAccessCreateWithoutClientInput, ClientAccessUncheckedCreateWithoutClientInput>
  }

  export type ClientAccessCreateManyClientInputEnvelope = {
    data: Enumerable<ClientAccessCreateManyClientInput>
    skipDuplicates?: boolean
  }

  export type ClientUserCreateWithoutClientInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutClientsInput
  }

  export type ClientUserUncheckedCreateWithoutClientInput = {
    id?: string
    userId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ClientUserCreateOrConnectWithoutClientInput = {
    where: ClientUserWhereUniqueInput
    create: XOR<ClientUserCreateWithoutClientInput, ClientUserUncheckedCreateWithoutClientInput>
  }

  export type ClientUserCreateManyClientInputEnvelope = {
    data: Enumerable<ClientUserCreateManyClientInput>
    skipDuplicates?: boolean
  }

  export type ClientAccessUpsertWithWhereUniqueWithoutClientInput = {
    where: ClientAccessWhereUniqueInput
    update: XOR<ClientAccessUpdateWithoutClientInput, ClientAccessUncheckedUpdateWithoutClientInput>
    create: XOR<ClientAccessCreateWithoutClientInput, ClientAccessUncheckedCreateWithoutClientInput>
  }

  export type ClientAccessUpdateWithWhereUniqueWithoutClientInput = {
    where: ClientAccessWhereUniqueInput
    data: XOR<ClientAccessUpdateWithoutClientInput, ClientAccessUncheckedUpdateWithoutClientInput>
  }

  export type ClientAccessUpdateManyWithWhereWithoutClientInput = {
    where: ClientAccessScalarWhereInput
    data: XOR<ClientAccessUpdateManyMutationInput, ClientAccessUncheckedUpdateManyWithoutAccessInput>
  }

  export type ClientAccessScalarWhereInput = {
    AND?: Enumerable<ClientAccessScalarWhereInput>
    OR?: Enumerable<ClientAccessScalarWhereInput>
    NOT?: Enumerable<ClientAccessScalarWhereInput>
    accessId?: IntFilter | number
    clientId?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    id?: StringFilter | string
  }

  export type ClientUserUpsertWithWhereUniqueWithoutClientInput = {
    where: ClientUserWhereUniqueInput
    update: XOR<ClientUserUpdateWithoutClientInput, ClientUserUncheckedUpdateWithoutClientInput>
    create: XOR<ClientUserCreateWithoutClientInput, ClientUserUncheckedCreateWithoutClientInput>
  }

  export type ClientUserUpdateWithWhereUniqueWithoutClientInput = {
    where: ClientUserWhereUniqueInput
    data: XOR<ClientUserUpdateWithoutClientInput, ClientUserUncheckedUpdateWithoutClientInput>
  }

  export type ClientUserUpdateManyWithWhereWithoutClientInput = {
    where: ClientUserScalarWhereInput
    data: XOR<ClientUserUpdateManyMutationInput, ClientUserUncheckedUpdateManyWithoutUsersInput>
  }

  export type ClientCreateWithoutUsersInput = {
    name: string
    cnpj: string
    email?: string | null
    access?: ClientAccessCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    cnpj: string
    email?: string | null
    access?: ClientAccessUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutUsersInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutUsersInput, ClientUncheckedCreateWithoutUsersInput>
  }

  export type UserCreateWithoutClientsInput = {
    email: string
    password: string
    name?: string | null
    role: RoleUser
  }

  export type UserUncheckedCreateWithoutClientsInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    role: RoleUser
  }

  export type UserCreateOrConnectWithoutClientsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClientsInput, UserUncheckedCreateWithoutClientsInput>
  }

  export type ClientUpsertWithoutUsersInput = {
    update: XOR<ClientUpdateWithoutUsersInput, ClientUncheckedUpdateWithoutUsersInput>
    create: XOR<ClientCreateWithoutUsersInput, ClientUncheckedCreateWithoutUsersInput>
  }

  export type ClientUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    access?: ClientAccessUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    access?: ClientAccessUncheckedUpdateManyWithoutClientNestedInput
  }

  export type UserUpsertWithoutClientsInput = {
    update: XOR<UserUpdateWithoutClientsInput, UserUncheckedUpdateWithoutClientsInput>
    create: XOR<UserCreateWithoutClientsInput, UserUncheckedCreateWithoutClientsInput>
  }

  export type UserUpdateWithoutClientsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
  }

  export type UserUncheckedUpdateWithoutClientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
  }

  export type AccessCreateWithoutClientsInput = {
    type: number
    server: boolean
    access: string
    desc: string
    typeAccess?: AccessTypeAccessCreateNestedManyWithoutAccessInput
  }

  export type AccessUncheckedCreateWithoutClientsInput = {
    id?: number
    type: number
    server: boolean
    access: string
    desc: string
    typeAccess?: AccessTypeAccessUncheckedCreateNestedManyWithoutAccessInput
  }

  export type AccessCreateOrConnectWithoutClientsInput = {
    where: AccessWhereUniqueInput
    create: XOR<AccessCreateWithoutClientsInput, AccessUncheckedCreateWithoutClientsInput>
  }

  export type ClientCreateWithoutAccessInput = {
    name: string
    cnpj: string
    email?: string | null
    users?: ClientUserCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutAccessInput = {
    id?: number
    name: string
    cnpj: string
    email?: string | null
    users?: ClientUserUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutAccessInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutAccessInput, ClientUncheckedCreateWithoutAccessInput>
  }

  export type AccessUpsertWithoutClientsInput = {
    update: XOR<AccessUpdateWithoutClientsInput, AccessUncheckedUpdateWithoutClientsInput>
    create: XOR<AccessCreateWithoutClientsInput, AccessUncheckedCreateWithoutClientsInput>
  }

  export type AccessUpdateWithoutClientsInput = {
    type?: IntFieldUpdateOperationsInput | number
    server?: BoolFieldUpdateOperationsInput | boolean
    access?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    typeAccess?: AccessTypeAccessUpdateManyWithoutAccessNestedInput
  }

  export type AccessUncheckedUpdateWithoutClientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    server?: BoolFieldUpdateOperationsInput | boolean
    access?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    typeAccess?: AccessTypeAccessUncheckedUpdateManyWithoutAccessNestedInput
  }

  export type ClientUpsertWithoutAccessInput = {
    update: XOR<ClientUpdateWithoutAccessInput, ClientUncheckedUpdateWithoutAccessInput>
    create: XOR<ClientCreateWithoutAccessInput, ClientUncheckedCreateWithoutAccessInput>
  }

  export type ClientUpdateWithoutAccessInput = {
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    users?: ClientUserUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutAccessInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    users?: ClientUserUncheckedUpdateManyWithoutClientNestedInput
  }

  export type AccessTypeAccessCreateWithoutAccessInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    typeAccess: TypeAccessCreateNestedOneWithoutAccessInput
  }

  export type AccessTypeAccessUncheckedCreateWithoutAccessInput = {
    id?: string
    typeAccessId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AccessTypeAccessCreateOrConnectWithoutAccessInput = {
    where: AccessTypeAccessWhereUniqueInput
    create: XOR<AccessTypeAccessCreateWithoutAccessInput, AccessTypeAccessUncheckedCreateWithoutAccessInput>
  }

  export type AccessTypeAccessCreateManyAccessInputEnvelope = {
    data: Enumerable<AccessTypeAccessCreateManyAccessInput>
    skipDuplicates?: boolean
  }

  export type ClientAccessCreateWithoutAccessInput = {
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
    Client: ClientCreateNestedOneWithoutAccessInput
  }

  export type ClientAccessUncheckedCreateWithoutAccessInput = {
    clientId: number
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
  }

  export type ClientAccessCreateOrConnectWithoutAccessInput = {
    where: ClientAccessWhereUniqueInput
    create: XOR<ClientAccessCreateWithoutAccessInput, ClientAccessUncheckedCreateWithoutAccessInput>
  }

  export type ClientAccessCreateManyAccessInputEnvelope = {
    data: Enumerable<ClientAccessCreateManyAccessInput>
    skipDuplicates?: boolean
  }

  export type AccessTypeAccessUpsertWithWhereUniqueWithoutAccessInput = {
    where: AccessTypeAccessWhereUniqueInput
    update: XOR<AccessTypeAccessUpdateWithoutAccessInput, AccessTypeAccessUncheckedUpdateWithoutAccessInput>
    create: XOR<AccessTypeAccessCreateWithoutAccessInput, AccessTypeAccessUncheckedCreateWithoutAccessInput>
  }

  export type AccessTypeAccessUpdateWithWhereUniqueWithoutAccessInput = {
    where: AccessTypeAccessWhereUniqueInput
    data: XOR<AccessTypeAccessUpdateWithoutAccessInput, AccessTypeAccessUncheckedUpdateWithoutAccessInput>
  }

  export type AccessTypeAccessUpdateManyWithWhereWithoutAccessInput = {
    where: AccessTypeAccessScalarWhereInput
    data: XOR<AccessTypeAccessUpdateManyMutationInput, AccessTypeAccessUncheckedUpdateManyWithoutTypeAccessInput>
  }

  export type AccessTypeAccessScalarWhereInput = {
    AND?: Enumerable<AccessTypeAccessScalarWhereInput>
    OR?: Enumerable<AccessTypeAccessScalarWhereInput>
    NOT?: Enumerable<AccessTypeAccessScalarWhereInput>
    id?: StringFilter | string
    accessId?: IntFilter | number
    typeAccessId?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type ClientAccessUpsertWithWhereUniqueWithoutAccessInput = {
    where: ClientAccessWhereUniqueInput
    update: XOR<ClientAccessUpdateWithoutAccessInput, ClientAccessUncheckedUpdateWithoutAccessInput>
    create: XOR<ClientAccessCreateWithoutAccessInput, ClientAccessUncheckedCreateWithoutAccessInput>
  }

  export type ClientAccessUpdateWithWhereUniqueWithoutAccessInput = {
    where: ClientAccessWhereUniqueInput
    data: XOR<ClientAccessUpdateWithoutAccessInput, ClientAccessUncheckedUpdateWithoutAccessInput>
  }

  export type ClientAccessUpdateManyWithWhereWithoutAccessInput = {
    where: ClientAccessScalarWhereInput
    data: XOR<ClientAccessUpdateManyMutationInput, ClientAccessUncheckedUpdateManyWithoutClientsInput>
  }

  export type AccessCreateWithoutTypeAccessInput = {
    type: number
    server: boolean
    access: string
    desc: string
    clients?: ClientAccessCreateNestedManyWithoutAccessInput
  }

  export type AccessUncheckedCreateWithoutTypeAccessInput = {
    id?: number
    type: number
    server: boolean
    access: string
    desc: string
    clients?: ClientAccessUncheckedCreateNestedManyWithoutAccessInput
  }

  export type AccessCreateOrConnectWithoutTypeAccessInput = {
    where: AccessWhereUniqueInput
    create: XOR<AccessCreateWithoutTypeAccessInput, AccessUncheckedCreateWithoutTypeAccessInput>
  }

  export type TypeAccessCreateWithoutAccessInput = {
    description: string
    role: RoleUser
  }

  export type TypeAccessUncheckedCreateWithoutAccessInput = {
    id?: number
    description: string
    role: RoleUser
  }

  export type TypeAccessCreateOrConnectWithoutAccessInput = {
    where: TypeAccessWhereUniqueInput
    create: XOR<TypeAccessCreateWithoutAccessInput, TypeAccessUncheckedCreateWithoutAccessInput>
  }

  export type AccessUpsertWithoutTypeAccessInput = {
    update: XOR<AccessUpdateWithoutTypeAccessInput, AccessUncheckedUpdateWithoutTypeAccessInput>
    create: XOR<AccessCreateWithoutTypeAccessInput, AccessUncheckedCreateWithoutTypeAccessInput>
  }

  export type AccessUpdateWithoutTypeAccessInput = {
    type?: IntFieldUpdateOperationsInput | number
    server?: BoolFieldUpdateOperationsInput | boolean
    access?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    clients?: ClientAccessUpdateManyWithoutAccessNestedInput
  }

  export type AccessUncheckedUpdateWithoutTypeAccessInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    server?: BoolFieldUpdateOperationsInput | boolean
    access?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    clients?: ClientAccessUncheckedUpdateManyWithoutAccessNestedInput
  }

  export type TypeAccessUpsertWithoutAccessInput = {
    update: XOR<TypeAccessUpdateWithoutAccessInput, TypeAccessUncheckedUpdateWithoutAccessInput>
    create: XOR<TypeAccessCreateWithoutAccessInput, TypeAccessUncheckedCreateWithoutAccessInput>
  }

  export type TypeAccessUpdateWithoutAccessInput = {
    description?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
  }

  export type TypeAccessUncheckedUpdateWithoutAccessInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUserFieldUpdateOperationsInput | RoleUser
  }

  export type AccessTypeAccessCreateWithoutTypeAccessInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    access: AccessCreateNestedOneWithoutTypeAccessInput
  }

  export type AccessTypeAccessUncheckedCreateWithoutTypeAccessInput = {
    id?: string
    accessId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AccessTypeAccessCreateOrConnectWithoutTypeAccessInput = {
    where: AccessTypeAccessWhereUniqueInput
    create: XOR<AccessTypeAccessCreateWithoutTypeAccessInput, AccessTypeAccessUncheckedCreateWithoutTypeAccessInput>
  }

  export type AccessTypeAccessCreateManyTypeAccessInputEnvelope = {
    data: Enumerable<AccessTypeAccessCreateManyTypeAccessInput>
    skipDuplicates?: boolean
  }

  export type AccessTypeAccessUpsertWithWhereUniqueWithoutTypeAccessInput = {
    where: AccessTypeAccessWhereUniqueInput
    update: XOR<AccessTypeAccessUpdateWithoutTypeAccessInput, AccessTypeAccessUncheckedUpdateWithoutTypeAccessInput>
    create: XOR<AccessTypeAccessCreateWithoutTypeAccessInput, AccessTypeAccessUncheckedCreateWithoutTypeAccessInput>
  }

  export type AccessTypeAccessUpdateWithWhereUniqueWithoutTypeAccessInput = {
    where: AccessTypeAccessWhereUniqueInput
    data: XOR<AccessTypeAccessUpdateWithoutTypeAccessInput, AccessTypeAccessUncheckedUpdateWithoutTypeAccessInput>
  }

  export type AccessTypeAccessUpdateManyWithWhereWithoutTypeAccessInput = {
    where: AccessTypeAccessScalarWhereInput
    data: XOR<AccessTypeAccessUpdateManyMutationInput, AccessTypeAccessUncheckedUpdateManyWithoutAccessInput>
  }

  export type ClientUserCreateManyUserInput = {
    id?: string
    clientId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ClientUserUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Client?: ClientUpdateOneRequiredWithoutUsersNestedInput
  }

  export type ClientUserUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUserUncheckedUpdateManyWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientAccessCreateManyClientInput = {
    accessId: number
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
  }

  export type ClientUserCreateManyClientInput = {
    id?: string
    userId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ClientAccessUpdateWithoutClientInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    access?: AccessUpdateOneRequiredWithoutClientsNestedInput
  }

  export type ClientAccessUncheckedUpdateWithoutClientInput = {
    accessId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ClientAccessUncheckedUpdateManyWithoutAccessInput = {
    accessId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ClientUserUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutClientsNestedInput
  }

  export type ClientUserUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUserUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccessTypeAccessCreateManyAccessInput = {
    id?: string
    typeAccessId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ClientAccessCreateManyAccessInput = {
    clientId: number
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
  }

  export type AccessTypeAccessUpdateWithoutAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    typeAccess?: TypeAccessUpdateOneRequiredWithoutAccessNestedInput
  }

  export type AccessTypeAccessUncheckedUpdateWithoutAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeAccessId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccessTypeAccessUncheckedUpdateManyWithoutTypeAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeAccessId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientAccessUpdateWithoutAccessInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    Client?: ClientUpdateOneRequiredWithoutAccessNestedInput
  }

  export type ClientAccessUncheckedUpdateWithoutAccessInput = {
    clientId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ClientAccessUncheckedUpdateManyWithoutClientsInput = {
    clientId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AccessTypeAccessCreateManyTypeAccessInput = {
    id?: string
    accessId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AccessTypeAccessUpdateWithoutTypeAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    access?: AccessUpdateOneRequiredWithoutTypeAccessNestedInput
  }

  export type AccessTypeAccessUncheckedUpdateWithoutTypeAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccessTypeAccessUncheckedUpdateManyWithoutAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}